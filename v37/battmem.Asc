' battmem
_BATT_MEM_BASE = 0 : _BATTMEM_ID = 0
Global _BATT_MEM_BASE, _BATTMEM_ID
Procedure LIB_OPEN_BATTMEM[P_ID]
 Lib Open P_ID, "battmem.resource", 0
 _BATT_MEM_BASE = Lib Base(P_ID)
 _BATTMEM_ID = P_ID
End Proc[_BATT_MEM_BASE]
Procedure LIB_CLOSE_BATTMEM
 Lib Close _BATTMEM_ID
End Proc
'   6 $fffa -$0006 ObtainBattSemaphore()()
Procedure _OBTAIN_BATT_SEMAPHORE
 R=Lib Call(_BATTMEM_ID, -$6)
End Proc[R]
'  12 $fff4 -$000c ReleaseBattSemaphore()()
Procedure _RELEASE_BATT_SEMAPHORE
 R=Lib Call(_BATTMEM_ID, -$C)
End Proc[R]
'  18 $ffee -$0012 ReadBattMem(buffer,offset,length)(a0,d0/d1)
Procedure _READ_BATT_MEM[P_BUFFER,P_OFFSET,P_LENGTH]
 Areg(0) = P_BUFFER
 Dreg(0) = P_OFFSET
 Dreg(1) = P_LENGTH
 R=Lib Call(_BATTMEM_ID, -$12)
End Proc[R]
'  24 $ffe8 -$0018 WriteBattMem(buffer,offset,length)(a0,d0/d1)
Procedure _WRITE_BATT_MEM[P_BUFFER,P_OFFSET,P_LENGTH]
 Areg(0) = P_BUFFER
 Dreg(0) = P_OFFSET
 Dreg(1) = P_LENGTH
 R=Lib Call(_BATTMEM_ID, -$18)
End Proc[R]
