' intuition
_INTUITION_BASE = 0 : _INTUITION_ID = 0
Global _INTUITION_BASE, _INTUITION_ID
Procedure LIB_OPEN_INTUITION[P_ID]
 Lib Open P_ID, "intuition.library", 0
 _INTUITION_BASE = Lib Base(P_ID)
 _INTUITION_ID = P_ID
End Proc[_INTUITION_BASE]
Procedure LIB_CLOSE_INTUITION
 Lib Close _INTUITION_ID
End Proc
'  30 $ffe2 -$001e OpenIntuition()()
Procedure _OPEN_INTUITION
 R=Lib Call(_INTUITION_ID, -$1E)
End Proc[R]
'  36 $ffdc -$0024 Intuition(iEvent)(a0)
Procedure _INTUITION[P_I_EVENT]
 Areg(0) = P_I_EVENT
 R=Lib Call(_INTUITION_ID, -$24)
End Proc[R]
'  42 $ffd6 -$002a AddGadget(window,gadget,position)(a0/a1,d0)
Procedure _ADD_GADGET[P_WINDOW,P_GADGET,P_POSITION]
 Areg(0) = P_WINDOW
 Areg(1) = P_GADGET
 Dreg(0) = P_POSITION
 R=Lib Call(_INTUITION_ID, -$2A)
End Proc[R]
'  48 $ffd0 -$0030 ClearDMRequest(window)(a0)
Procedure _CLEAR_DM_REQUEST[P_WINDOW]
 Areg(0) = P_WINDOW
 R=Lib Call(_INTUITION_ID, -$30)
End Proc[R]
'  54 $ffca -$0036 ClearMenuStrip(window)(a0)
Procedure _CLEAR_MENU_STRIP[P_WINDOW]
 Areg(0) = P_WINDOW
 R=Lib Call(_INTUITION_ID, -$36)
End Proc[R]
'  60 $ffc4 -$003c ClearPointer(window)(a0)
Procedure _CLEAR_POINTER[P_WINDOW]
 Areg(0) = P_WINDOW
 R=Lib Call(_INTUITION_ID, -$3C)
End Proc[R]
'  66 $ffbe -$0042 CloseScreen(screen)(a0)
Procedure _CLOSE_SCREEN[P_SCREEN]
 Areg(0) = P_SCREEN
 R=Lib Call(_INTUITION_ID, -$42)
End Proc[R]
'  72 $ffb8 -$0048 CloseWindow(window)(a0)
Procedure _CLOSE_WINDOW[P_WINDOW]
 Areg(0) = P_WINDOW
 R=Lib Call(_INTUITION_ID, -$48)
End Proc[R]
'  78 $ffb2 -$004e CloseWorkBench()()
Procedure _CLOSE_WORK_BENCH
 R=Lib Call(_INTUITION_ID, -$4E)
End Proc[R]
'  84 $ffac -$0054 CurrentTime(seconds,micros)(a0/a1)
Procedure _CURRENT_TIME[P_SECONDS,P_MICROS]
 Areg(0) = P_SECONDS
 Areg(1) = P_MICROS
 R=Lib Call(_INTUITION_ID, -$54)
End Proc[R]
'  90 $ffa6 -$005a DisplayAlert(alertNumber,string,height)(d0/a0,d1)
Procedure _DISPLAY_ALERT[P_ALERT_NUMBER,P_STRING,P_HEIGHT]
 Dreg(0) = P_ALERT_NUMBER
 Areg(0) = P_STRING
 Dreg(1) = P_HEIGHT
 R=Lib Call(_INTUITION_ID, -$5A)
End Proc[R]
'  96 $ffa0 -$0060 DisplayBeep(screen)(a0)
Procedure _DISPLAY_BEEP[P_SCREEN]
 Areg(0) = P_SCREEN
 R=Lib Call(_INTUITION_ID, -$60)
End Proc[R]
' 102 $ff9a -$0066 DoubleClick(sSeconds,sMicros,cSeconds,cMicros)(d0/d1/d2/d3)
Procedure _DOUBLE_CLICK[P_S_SECONDS,P_S_MICROS,P_C_SECONDS,P_C_MICROS]
 Dreg(0) = P_S_SECONDS
 Dreg(1) = P_S_MICROS
 Dreg(2) = P_C_SECONDS
 Dreg(3) = P_C_MICROS
 R=Lib Call(_INTUITION_ID, -$66)
End Proc[R]
' 108 $ff94 -$006c DrawBorder(rp,border,leftOffset,topOffset)(a0/a1,d0/d1)
Procedure _DRAW_BORDER[P_RP,P_BORDER,P_LEFT_OFFSET,P_TOP_OFFSET]
 Areg(0) = P_RP
 Areg(1) = P_BORDER
 Dreg(0) = P_LEFT_OFFSET
 Dreg(1) = P_TOP_OFFSET
 R=Lib Call(_INTUITION_ID, -$6C)
End Proc[R]
' 114 $ff8e -$0072 DrawImage(rp,image,leftOffset,topOffset)(a0/a1,d0/d1)
Procedure _DRAW_IMAGE[P_RP,P_IMAGE,P_LEFT_OFFSET,P_TOP_OFFSET]
 Areg(0) = P_RP
 Areg(1) = P_IMAGE
 Dreg(0) = P_LEFT_OFFSET
 Dreg(1) = P_TOP_OFFSET
 R=Lib Call(_INTUITION_ID, -$72)
End Proc[R]
' 120 $ff88 -$0078 EndRequest(requester,window)(a0/a1)
Procedure _END_REQUEST[P_REQUESTER,P_WINDOW]
 Areg(0) = P_REQUESTER
 Areg(1) = P_WINDOW
 R=Lib Call(_INTUITION_ID, -$78)
End Proc[R]
' 126 $ff82 -$007e GetDefPrefs(preferences,size)(a0,d0)
Procedure _GET_DEF_PREFS[P_PREFERENCES,P_SIZE]
 Areg(0) = P_PREFERENCES
 Dreg(0) = P_SIZE
 R=Lib Call(_INTUITION_ID, -$7E)
End Proc[R]
' 132 $ff7c -$0084 GetPrefs(preferences,size)(a0,d0)
Procedure _GET_PREFS[P_PREFERENCES,P_SIZE]
 Areg(0) = P_PREFERENCES
 Dreg(0) = P_SIZE
 R=Lib Call(_INTUITION_ID, -$84)
End Proc[R]
' 138 $ff76 -$008a InitRequester(requester)(a0)
Procedure _INIT_REQUESTER[P_REQUESTER]
 Areg(0) = P_REQUESTER
 R=Lib Call(_INTUITION_ID, -$8A)
End Proc[R]
' 144 $ff70 -$0090 ItemAddress(menuStrip,menuNumber)(a0,d0)
Procedure _ITEM_ADDRESS[P_MENU_STRIP,P_MENU_NUMBER]
 Areg(0) = P_MENU_STRIP
 Dreg(0) = P_MENU_NUMBER
 R=Lib Call(_INTUITION_ID, -$90)
End Proc[R]
' 150 $ff6a -$0096 ModifyIDCMP(window,flags)(a0,d0)
Procedure _MODIFY_IDCMP[P_WINDOW,P_FLAGS]
 Areg(0) = P_WINDOW
 Dreg(0) = P_FLAGS
 R=Lib Call(_INTUITION_ID, -$96)
End Proc[R]
' 156 $ff64 -$009c ModifyProp(gadget,window,requester,flags,horizPot,vertPot,horizBody,vertBody)(a0/a1/a2,d0/d1/d2/d3/d4)
Procedure _MODIFY_PROP[P_GADGET,P_WINDOW,P_REQUESTER,P_FLAGS,P_HORIZ_POT,P_VERT_POT,P_HORIZ_BODY,P_VERT_BODY]
 Areg(0) = P_GADGET
 Areg(1) = P_WINDOW
 Areg(2) = P_REQUESTER
 Dreg(0) = P_FLAGS
 Dreg(1) = P_HORIZ_POT
 Dreg(2) = P_VERT_POT
 Dreg(3) = P_HORIZ_BODY
 Dreg(4) = P_VERT_BODY
 R=Lib Call(_INTUITION_ID, -$9C)
End Proc[R]
' 162 $ff5e -$00a2 MoveScreen(screen,dx,dy)(a0,d0/d1)
Procedure _MOVE_SCREEN[P_SCREEN,P_DX,P_DY]
 Areg(0) = P_SCREEN
 Dreg(0) = P_DX
 Dreg(1) = P_DY
 R=Lib Call(_INTUITION_ID, -$A2)
End Proc[R]
' 168 $ff58 -$00a8 MoveWindow(window,dx,dy)(a0,d0/d1)
Procedure _MOVE_WINDOW[P_WINDOW,P_DX,P_DY]
 Areg(0) = P_WINDOW
 Dreg(0) = P_DX
 Dreg(1) = P_DY
 R=Lib Call(_INTUITION_ID, -$A8)
End Proc[R]
' 174 $ff52 -$00ae OffGadget(gadget,window,requester)(a0/a1/a2)
Procedure _OFF_GADGET[P_GADGET,P_WINDOW,P_REQUESTER]
 Areg(0) = P_GADGET
 Areg(1) = P_WINDOW
 Areg(2) = P_REQUESTER
 R=Lib Call(_INTUITION_ID, -$AE)
End Proc[R]
' 180 $ff4c -$00b4 OffMenu(window,menuNumber)(a0,d0)
Procedure _OFF_MENU[P_WINDOW,P_MENU_NUMBER]
 Areg(0) = P_WINDOW
 Dreg(0) = P_MENU_NUMBER
 R=Lib Call(_INTUITION_ID, -$B4)
End Proc[R]
' 186 $ff46 -$00ba OnGadget(gadget,window,requester)(a0/a1/a2)
Procedure _ON_GADGET[P_GADGET,P_WINDOW,P_REQUESTER]
 Areg(0) = P_GADGET
 Areg(1) = P_WINDOW
 Areg(2) = P_REQUESTER
 R=Lib Call(_INTUITION_ID, -$BA)
End Proc[R]
' 192 $ff40 -$00c0 OnMenu(window,menuNumber)(a0,d0)
Procedure _ON_MENU[P_WINDOW,P_MENU_NUMBER]
 Areg(0) = P_WINDOW
 Dreg(0) = P_MENU_NUMBER
 R=Lib Call(_INTUITION_ID, -$C0)
End Proc[R]
' 198 $ff3a -$00c6 OpenScreen(newScreen)(a0)
Procedure _OPEN_SCREEN[P_NEW_SCREEN]
 Areg(0) = P_NEW_SCREEN
 R=Lib Call(_INTUITION_ID, -$C6)
End Proc[R]
' 204 $ff34 -$00cc OpenWindow(newWindow)(a0)
Procedure _OPEN_WINDOW[P_NEW_WINDOW]
 Areg(0) = P_NEW_WINDOW
 R=Lib Call(_INTUITION_ID, -$CC)
End Proc[R]
' 210 $ff2e -$00d2 OpenWorkBench()()
Procedure _OPEN_WORK_BENCH
 R=Lib Call(_INTUITION_ID, -$D2)
End Proc[R]
' 216 $ff28 -$00d8 PrintIText(rp,iText,left,top)(a0/a1,d0/d1)
Procedure _PRINT_I_TEXT[P_RP,P_I_TEXT,P_LEFT,P_TOP]
 Areg(0) = P_RP
 Areg(1) = P_I_TEXT
 Dreg(0) = P_LEFT
 Dreg(1) = P_TOP
 R=Lib Call(_INTUITION_ID, -$D8)
End Proc[R]
' 222 $ff22 -$00de RefreshGadgets(gadgets,window,requester)(a0/a1/a2)
Procedure _REFRESH_GADGETS[P_GADGETS,P_WINDOW,P_REQUESTER]
 Areg(0) = P_GADGETS
 Areg(1) = P_WINDOW
 Areg(2) = P_REQUESTER
 R=Lib Call(_INTUITION_ID, -$DE)
End Proc[R]
' 228 $ff1c -$00e4 RemoveGadget(window,gadget)(a0/a1)
Procedure _REMOVE_GADGET[P_WINDOW,P_GADGET]
 Areg(0) = P_WINDOW
 Areg(1) = P_GADGET
 R=Lib Call(_INTUITION_ID, -$E4)
End Proc[R]
' 234 $ff16 -$00ea ReportMouse(flag,window)(d0/a0)
Procedure _REPORT_MOUSE[P_FLAG,P_WINDOW]
 Dreg(0) = P_FLAG
 Areg(0) = P_WINDOW
 R=Lib Call(_INTUITION_ID, -$EA)
End Proc[R]
' 240 $ff10 -$00f0 Request(requester,window)(a0/a1)
Procedure _REQUEST[P_REQUESTER,P_WINDOW]
 Areg(0) = P_REQUESTER
 Areg(1) = P_WINDOW
 R=Lib Call(_INTUITION_ID, -$F0)
End Proc[R]
' 246 $ff0a -$00f6 ScreenToBack(screen)(a0)
Procedure _SCREEN_TO_BACK[P_SCREEN]
 Areg(0) = P_SCREEN
 R=Lib Call(_INTUITION_ID, -$F6)
End Proc[R]
' 252 $ff04 -$00fc ScreenToFront(screen)(a0)
Procedure _SCREEN_TO_FRONT[P_SCREEN]
 Areg(0) = P_SCREEN
 R=Lib Call(_INTUITION_ID, -$FC)
End Proc[R]
' 258 $fefe -$0102 SetDMRequest(window,requester)(a0/a1)
Procedure _SET_DM_REQUEST[P_WINDOW,P_REQUESTER]
 Areg(0) = P_WINDOW
 Areg(1) = P_REQUESTER
 R=Lib Call(_INTUITION_ID, -$102)
End Proc[R]
' 264 $fef8 -$0108 SetMenuStrip(window,menu)(a0/a1)
Procedure _SET_MENU_STRIP[P_WINDOW,P_MENU]
 Areg(0) = P_WINDOW
 Areg(1) = P_MENU
 R=Lib Call(_INTUITION_ID, -$108)
End Proc[R]
' 270 $fef2 -$010e SetPointer(window,pointer,height,width,xOffset,yOffset)(a0/a1,d0/d1/d2/d3)
Procedure _SET_POINTER[P_WINDOW,P_POINTER,P_HEIGHT,P_WIDTH,P_X_OFFSET,P_Y_OFFSET]
 Areg(0) = P_WINDOW
 Areg(1) = P_POINTER
 Dreg(0) = P_HEIGHT
 Dreg(1) = P_WIDTH
 Dreg(2) = P_X_OFFSET
 Dreg(3) = P_Y_OFFSET
 R=Lib Call(_INTUITION_ID, -$10E)
End Proc[R]
' 276 $feec -$0114 SetWindowTitles(window,windowTitle,screenTitle)(a0/a1/a2)
Procedure _SET_WINDOW_TITLES[P_WINDOW,P_WINDOW_TITLE,P_SCREEN_TITLE]
 Areg(0) = P_WINDOW
 Areg(1) = P_WINDOW_TITLE
 Areg(2) = P_SCREEN_TITLE
 R=Lib Call(_INTUITION_ID, -$114)
End Proc[R]
' 282 $fee6 -$011a ShowTitle(screen,showIt)(a0,d0)
Procedure _SHOW_TITLE[P_SCREEN,P_SHOW_IT]
 Areg(0) = P_SCREEN
 Dreg(0) = P_SHOW_IT
 R=Lib Call(_INTUITION_ID, -$11A)
End Proc[R]
' 288 $fee0 -$0120 SizeWindow(window,dx,dy)(a0,d0/d1)
Procedure _SIZE_WINDOW[P_WINDOW,P_DX,P_DY]
 Areg(0) = P_WINDOW
 Dreg(0) = P_DX
 Dreg(1) = P_DY
 R=Lib Call(_INTUITION_ID, -$120)
End Proc[R]
' 294 $feda -$0126 ViewAddress()()
Procedure _VIEW_ADDRESS
 R=Lib Call(_INTUITION_ID, -$126)
End Proc[R]
' 300 $fed4 -$012c ViewPortAddress(window)(a0)
Procedure _VIEW_PORT_ADDRESS[P_WINDOW]
 Areg(0) = P_WINDOW
 R=Lib Call(_INTUITION_ID, -$12C)
End Proc[R]
' 306 $fece -$0132 WindowToBack(window)(a0)
Procedure _WINDOW_TO_BACK[P_WINDOW]
 Areg(0) = P_WINDOW
 R=Lib Call(_INTUITION_ID, -$132)
End Proc[R]
' 312 $fec8 -$0138 WindowToFront(window)(a0)
Procedure _WINDOW_TO_FRONT[P_WINDOW]
 Areg(0) = P_WINDOW
 R=Lib Call(_INTUITION_ID, -$138)
End Proc[R]
' 318 $fec2 -$013e WindowLimits(window,widthMin,heightMin,widthMax,heightMax)(a0,d0/d1/d2/d3)
Procedure _WINDOW_LIMITS[P_WINDOW,P_WIDTH_MIN,P_HEIGHT_MIN,P_WIDTH_MAX,P_HEIGHT_MAX]
 Areg(0) = P_WINDOW
 Dreg(0) = P_WIDTH_MIN
 Dreg(1) = P_HEIGHT_MIN
 Dreg(2) = P_WIDTH_MAX
 Dreg(3) = P_HEIGHT_MAX
 R=Lib Call(_INTUITION_ID, -$13E)
End Proc[R]
' 324 $febc -$0144 SetPrefs(preferences,size,inform)(a0,d0/d1)
Procedure _SET_PREFS[P_PREFERENCES,P_SIZE,P_INFORM]
 Areg(0) = P_PREFERENCES
 Dreg(0) = P_SIZE
 Dreg(1) = P_INFORM
 R=Lib Call(_INTUITION_ID, -$144)
End Proc[R]
' 330 $feb6 -$014a IntuiTextLength(iText)(a0)
Procedure _INTUI_TEXT_LENGTH[P_I_TEXT]
 Areg(0) = P_I_TEXT
 R=Lib Call(_INTUITION_ID, -$14A)
End Proc[R]
' 336 $feb0 -$0150 WBenchToBack()()
Procedure _W_BENCH_TO_BACK
 R=Lib Call(_INTUITION_ID, -$150)
End Proc[R]
' 342 $feaa -$0156 WBenchToFront()()
Procedure _W_BENCH_TO_FRONT
 R=Lib Call(_INTUITION_ID, -$156)
End Proc[R]
' 348 $fea4 -$015c AutoRequest(window,body,posText,negText,pFlag,nFlag,width,height)(a0/a1/a2/a3,d0/d1/d2/d3)
Procedure _AUTO_REQUEST[P_WINDOW,P_BODY,P_POS_TEXT,P_NEG_TEXT,P_P_FLAG,P_N_FLAG,P_WIDTH,P_HEIGHT]
 Areg(0) = P_WINDOW
 Areg(1) = P_BODY
 Areg(2) = P_POS_TEXT
 Areg(3) = P_NEG_TEXT
 Dreg(0) = P_P_FLAG
 Dreg(1) = P_N_FLAG
 Dreg(2) = P_WIDTH
 Dreg(3) = P_HEIGHT
 R=Lib Call(_INTUITION_ID, -$15C)
End Proc[R]
' 354 $fe9e -$0162 BeginRefresh(window)(a0)
Procedure _BEGIN_REFRESH[P_WINDOW]
 Areg(0) = P_WINDOW
 R=Lib Call(_INTUITION_ID, -$162)
End Proc[R]
' 360 $fe98 -$0168 BuildSysRequest(window,body,posText,negText,flags,width,height)(a0/a1/a2/a3,d0/d1/d2)
Procedure _BUILD_SYS_REQUEST[P_WINDOW,P_BODY,P_POS_TEXT,P_NEG_TEXT,P_FLAGS,P_WIDTH,P_HEIGHT]
 Areg(0) = P_WINDOW
 Areg(1) = P_BODY
 Areg(2) = P_POS_TEXT
 Areg(3) = P_NEG_TEXT
 Dreg(0) = P_FLAGS
 Dreg(1) = P_WIDTH
 Dreg(2) = P_HEIGHT
 R=Lib Call(_INTUITION_ID, -$168)
End Proc[R]
' 366 $fe92 -$016e EndRefresh(window,complete)(a0,d0)
Procedure _END_REFRESH[P_WINDOW,P_COMPLETE]
 Areg(0) = P_WINDOW
 Dreg(0) = P_COMPLETE
 R=Lib Call(_INTUITION_ID, -$16E)
End Proc[R]
' 372 $fe8c -$0174 FreeSysRequest(window)(a0)
Procedure _FREE_SYS_REQUEST[P_WINDOW]
 Areg(0) = P_WINDOW
 R=Lib Call(_INTUITION_ID, -$174)
End Proc[R]
' 378 $fe86 -$017a MakeScreen(screen)(a0)
Procedure _MAKE_SCREEN[P_SCREEN]
 Areg(0) = P_SCREEN
 R=Lib Call(_INTUITION_ID, -$17A)
End Proc[R]
' 384 $fe80 -$0180 RemakeDisplay()()
Procedure _REMAKE_DISPLAY
 R=Lib Call(_INTUITION_ID, -$180)
End Proc[R]
' 390 $fe7a -$0186 RethinkDisplay()()
Procedure _RETHINK_DISPLAY
 R=Lib Call(_INTUITION_ID, -$186)
End Proc[R]
' 396 $fe74 -$018c AllocRemember(rememberKey,size,flags)(a0,d0/d1)
Procedure _ALLOC_REMEMBER[P_REMEMBER_KEY,P_SIZE,P_FLAGS]
 Areg(0) = P_REMEMBER_KEY
 Dreg(0) = P_SIZE
 Dreg(1) = P_FLAGS
 R=Lib Call(_INTUITION_ID, -$18C)
End Proc[R]
' 402 $fe6e -$0192 AlohaWorkbench(wbport)(a0)
Procedure _ALOHA_WORKBENCH[P_WBPORT]
 Areg(0) = P_WBPORT
 R=Lib Call(_INTUITION_ID, -$192)
End Proc[R]
' 408 $fe68 -$0198 FreeRemember(rememberKey,reallyForget)(a0,d0)
Procedure _FREE_REMEMBER[P_REMEMBER_KEY,P_REALLY_FORGET]
 Areg(0) = P_REMEMBER_KEY
 Dreg(0) = P_REALLY_FORGET
 R=Lib Call(_INTUITION_ID, -$198)
End Proc[R]
' 414 $fe62 -$019e LockIBase(dontknow)(d0)
Procedure _LOCK_I_BASE[P_DONTKNOW]
 Dreg(0) = P_DONTKNOW
 R=Lib Call(_INTUITION_ID, -$19E)
End Proc[R]
' 420 $fe5c -$01a4 UnlockIBase(ibLock)(a0)
Procedure _UNLOCK_I_BASE[P_IB_LOCK]
 Areg(0) = P_IB_LOCK
 R=Lib Call(_INTUITION_ID, -$1A4)
End Proc[R]
' 426 $fe56 -$01aa GetScreenData(buffer,size,type,screen)(a0,d0/d1/a1)
Procedure _GET_SCREEN_DATA[P_BUFFER,P_SIZE,P_TYPE,P_SCREEN]
 Areg(0) = P_BUFFER
 Dreg(0) = P_SIZE
 Dreg(1) = P_TYPE
 Areg(1) = P_SCREEN
 R=Lib Call(_INTUITION_ID, -$1AA)
End Proc[R]
' 432 $fe50 -$01b0 RefreshGList(gadgets,window,requester,numGad)(a0/a1/a2,d0)
Procedure _REFRESH_G_LIST[P_GADGETS,P_WINDOW,P_REQUESTER,P_NUM_GAD]
 Areg(0) = P_GADGETS
 Areg(1) = P_WINDOW
 Areg(2) = P_REQUESTER
 Dreg(0) = P_NUM_GAD
 R=Lib Call(_INTUITION_ID, -$1B0)
End Proc[R]
' 438 $fe4a -$01b6 AddGList(window,gadget,position,numGad,requester)(a0/a1,d0/d1/a2)
Procedure _ADD_G_LIST[P_WINDOW,P_GADGET,P_POSITION,P_NUM_GAD,P_REQUESTER]
 Areg(0) = P_WINDOW
 Areg(1) = P_GADGET
 Dreg(0) = P_POSITION
 Dreg(1) = P_NUM_GAD
 Areg(2) = P_REQUESTER
 R=Lib Call(_INTUITION_ID, -$1B6)
End Proc[R]
' 444 $fe44 -$01bc RemoveGList(remPtr,gadget,numGad)(a0/a1,d0)
Procedure _REMOVE_G_LIST[P_REM_PTR,P_GADGET,P_NUM_GAD]
 Areg(0) = P_REM_PTR
 Areg(1) = P_GADGET
 Dreg(0) = P_NUM_GAD
 R=Lib Call(_INTUITION_ID, -$1BC)
End Proc[R]
' 450 $fe3e -$01c2 ActivateWindow(window)(a0)
Procedure _ACTIVATE_WINDOW[P_WINDOW]
 Areg(0) = P_WINDOW
 R=Lib Call(_INTUITION_ID, -$1C2)
End Proc[R]
' 456 $fe38 -$01c8 RefreshWindowFrame(window)(a0)
Procedure _REFRESH_WINDOW_FRAME[P_WINDOW]
 Areg(0) = P_WINDOW
 R=Lib Call(_INTUITION_ID, -$1C8)
End Proc[R]
' 462 $fe32 -$01ce ActivateGadget(gadgets,window,requester)(a0/a1/a2)
Procedure _ACTIVATE_GADGET[P_GADGETS,P_WINDOW,P_REQUESTER]
 Areg(0) = P_GADGETS
 Areg(1) = P_WINDOW
 Areg(2) = P_REQUESTER
 R=Lib Call(_INTUITION_ID, -$1CE)
End Proc[R]
' 468 $fe2c -$01d4 NewModifyProp(gadget,window,requester,flags,horizPot,vertPot,horizBody,vertBody,numGad)(a0/a1/a2,d0/d1/d2/d3/d4/d5)
Procedure _NEW_MODIFY_PROP[P_GADGET,P_WINDOW,P_REQUESTER,P_FLAGS,P_HORIZ_POT,P_VERT_POT,P_HORIZ_BODY,P_VERT_BODY,P_NUM_GAD]
 Areg(0) = P_GADGET
 Areg(1) = P_WINDOW
 Areg(2) = P_REQUESTER
 Dreg(0) = P_FLAGS
 Dreg(1) = P_HORIZ_POT
 Dreg(2) = P_VERT_POT
 Dreg(3) = P_HORIZ_BODY
 Dreg(4) = P_VERT_BODY
 Dreg(5) = P_NUM_GAD
 R=Lib Call(_INTUITION_ID, -$1D4)
End Proc[R]
' 474 $fe26 -$01da QueryOverscan(displayID,rect,oScanType)(a0/a1,d0)
Procedure _QUERY_OVERSCAN[P_DISPLAY_ID,P_RECT,P_O_SCAN_TYPE]
 Areg(0) = P_DISPLAY_ID
 Areg(1) = P_RECT
 Dreg(0) = P_O_SCAN_TYPE
 R=Lib Call(_INTUITION_ID, -$1DA)
End Proc[R]
' 480 $fe20 -$01e0 MoveWindowInFrontOf(window,behindWindow)(a0/a1)
Procedure _MOVE_WINDOW_IN_FRONT_OF[P_WINDOW,P_BEHIND_WINDOW]
 Areg(0) = P_WINDOW
 Areg(1) = P_BEHIND_WINDOW
 R=Lib Call(_INTUITION_ID, -$1E0)
End Proc[R]
' 486 $fe1a -$01e6 ChangeWindowBox(window,left,top,width,height)(a0,d0/d1/d2/d3)
Procedure _CHANGE_WINDOW_BOX[P_WINDOW,P_LEFT,P_TOP,P_WIDTH,P_HEIGHT]
 Areg(0) = P_WINDOW
 Dreg(0) = P_LEFT
 Dreg(1) = P_TOP
 Dreg(2) = P_WIDTH
 Dreg(3) = P_HEIGHT
 R=Lib Call(_INTUITION_ID, -$1E6)
End Proc[R]
' 492 $fe14 -$01ec SetEditHook(hook)(a0)
Procedure _SET_EDIT_HOOK[P_HOOK]
 Areg(0) = P_HOOK
 R=Lib Call(_INTUITION_ID, -$1EC)
End Proc[R]
' 498 $fe0e -$01f2 SetMouseQueue(window,queueLength)(a0,d0)
Procedure _SET_MOUSE_QUEUE[P_WINDOW,P_QUEUE_LENGTH]
 Areg(0) = P_WINDOW
 Dreg(0) = P_QUEUE_LENGTH
 R=Lib Call(_INTUITION_ID, -$1F2)
End Proc[R]
' 504 $fe08 -$01f8 ZipWindow(window)(a0)
Procedure _ZIP_WINDOW[P_WINDOW]
 Areg(0) = P_WINDOW
 R=Lib Call(_INTUITION_ID, -$1F8)
End Proc[R]
' 510 $fe02 -$01fe LockPubScreen(name)(a0)
Procedure _LOCK_PUB_SCREEN[P_NAME]
 Areg(0) = P_NAME
 R=Lib Call(_INTUITION_ID, -$1FE)
End Proc[R]
' 516 $fdfc -$0204 UnlockPubScreen(name,screen)(a0/a1)
Procedure _UNLOCK_PUB_SCREEN[P_NAME,P_SCREEN]
 Areg(0) = P_NAME
 Areg(1) = P_SCREEN
 R=Lib Call(_INTUITION_ID, -$204)
End Proc[R]
' 522 $fdf6 -$020a LockPubScreenList()()
Procedure _LOCK_PUB_SCREEN_LIST
 R=Lib Call(_INTUITION_ID, -$20A)
End Proc[R]
' 528 $fdf0 -$0210 UnlockPubScreenList()()
Procedure _UNLOCK_PUB_SCREEN_LIST
 R=Lib Call(_INTUITION_ID, -$210)
End Proc[R]
' 534 $fdea -$0216 NextPubScreen(screen,namebuf)(a0/a1)
Procedure _NEXT_PUB_SCREEN[P_SCREEN,P_NAMEBUF]
 Areg(0) = P_SCREEN
 Areg(1) = P_NAMEBUF
 R=Lib Call(_INTUITION_ID, -$216)
End Proc[R]
' 540 $fde4 -$021c SetDefaultPubScreen(name)(a0)
Procedure _SET_DEFAULT_PUB_SCREEN[P_NAME]
 Areg(0) = P_NAME
 R=Lib Call(_INTUITION_ID, -$21C)
End Proc[R]
' 546 $fdde -$0222 SetPubScreenModes(modes)(d0)
Procedure _SET_PUB_SCREEN_MODES[P_MODES]
 Dreg(0) = P_MODES
 R=Lib Call(_INTUITION_ID, -$222)
End Proc[R]
' 552 $fdd8 -$0228 PubScreenStatus(screen,statusFlags)(a0,d0)
Procedure _PUB_SCREEN_STATUS[P_SCREEN,P_STATUS_FLAGS]
 Areg(0) = P_SCREEN
 Dreg(0) = P_STATUS_FLAGS
 R=Lib Call(_INTUITION_ID, -$228)
End Proc[R]
' 558 $fdd2 -$022e ObtainGIRPort(gInfo)(a0)
Procedure _OBTAIN_GIR_PORT[P_G_INFO]
 Areg(0) = P_G_INFO
 R=Lib Call(_INTUITION_ID, -$22E)
End Proc[R]
' 564 $fdcc -$0234 ReleaseGIRPort(rp)(a0)
Procedure _RELEASE_GIR_PORT[P_RP]
 Areg(0) = P_RP
 R=Lib Call(_INTUITION_ID, -$234)
End Proc[R]
' 570 $fdc6 -$023a GadgetMouse(gadget,gInfo,mousePoint)(a0/a1/a2)
Procedure _GADGET_MOUSE[P_GADGET,P_G_INFO,P_MOUSE_POINT]
 Areg(0) = P_GADGET
 Areg(1) = P_G_INFO
 Areg(2) = P_MOUSE_POINT
 R=Lib Call(_INTUITION_ID, -$23A)
End Proc[R]
' 582 $fdba -$0246 GetDefaultPubScreen(nameBuffer)(a0)
Procedure _GET_DEFAULT_PUB_SCREEN[P_NAME_BUFFER]
 Areg(0) = P_NAME_BUFFER
 R=Lib Call(_INTUITION_ID, -$246)
End Proc[R]
' 588 $fdb4 -$024c EasyRequestArgs(window,easyStruct,idcmpPtr,args)(a0/a1/a2/a3)
Procedure _EASY_REQUEST_ARGS[P_WINDOW,P_EASY_STRUCT,P_IDCMP_PTR,P_ARGS]
 Areg(0) = P_WINDOW
 Areg(1) = P_EASY_STRUCT
 Areg(2) = P_IDCMP_PTR
 Areg(3) = P_ARGS
 R=Lib Call(_INTUITION_ID, -$24C)
End Proc[R]
' 594 $fdae -$0252 BuildEasyRequestArgs(window,easyStruct,idcmp,args)(a0/a1,d0/a3)
Procedure _BUILD_EASY_REQUEST_ARGS[P_WINDOW,P_EASY_STRUCT,P_IDCMP,P_ARGS]
 Areg(0) = P_WINDOW
 Areg(1) = P_EASY_STRUCT
 Dreg(0) = P_IDCMP
 Areg(3) = P_ARGS
 R=Lib Call(_INTUITION_ID, -$252)
End Proc[R]
' 600 $fda8 -$0258 SysReqHandler(window,idcmpPtr,waitInput)(a0/a1,d0)
Procedure _SYS_REQ_HANDLER[P_WINDOW,P_IDCMP_PTR,P_WAIT_INPUT]
 Areg(0) = P_WINDOW
 Areg(1) = P_IDCMP_PTR
 Dreg(0) = P_WAIT_INPUT
 R=Lib Call(_INTUITION_ID, -$258)
End Proc[R]
' 606 $fda2 -$025e OpenWindowTagList(newWindow,tagList)(a0/a1)
Procedure _OPEN_WINDOW_TAG_LIST[P_NEW_WINDOW,P_TAG_LIST]
 Areg(0) = P_NEW_WINDOW
 Areg(1) = P_TAG_LIST
 R=Lib Call(_INTUITION_ID, -$25E)
End Proc[R]
' 612 $fd9c -$0264 OpenScreenTagList(newScreen,tagList)(a0/a1)
Procedure _OPEN_SCREEN_TAG_LIST[P_NEW_SCREEN,P_TAG_LIST]
 Areg(0) = P_NEW_SCREEN
 Areg(1) = P_TAG_LIST
 R=Lib Call(_INTUITION_ID, -$264)
End Proc[R]
' 618 $fd96 -$026a DrawImageState(rp,image,leftOffset,topOffset,state,drawInfo)(a0/a1,d0/d1/d2/a2)
Procedure _DRAW_IMAGE_STATE[P_RP,P_IMAGE,P_LEFT_OFFSET,P_TOP_OFFSET,P_STATE,P_DRAW_INFO]
 Areg(0) = P_RP
 Areg(1) = P_IMAGE
 Dreg(0) = P_LEFT_OFFSET
 Dreg(1) = P_TOP_OFFSET
 Dreg(2) = P_STATE
 Areg(2) = P_DRAW_INFO
 R=Lib Call(_INTUITION_ID, -$26A)
End Proc[R]
' 624 $fd90 -$0270 PointInImage(point,image)(d0/a0)
Procedure _POINT_IN_IMAGE[P_POINT,P_IMAGE]
 Dreg(0) = P_POINT
 Areg(0) = P_IMAGE
 R=Lib Call(_INTUITION_ID, -$270)
End Proc[R]
' 630 $fd8a -$0276 EraseImage(rp,image,leftOffset,topOffset)(a0/a1,d0/d1)
Procedure _ERASE_IMAGE[P_RP,P_IMAGE,P_LEFT_OFFSET,P_TOP_OFFSET]
 Areg(0) = P_RP
 Areg(1) = P_IMAGE
 Dreg(0) = P_LEFT_OFFSET
 Dreg(1) = P_TOP_OFFSET
 R=Lib Call(_INTUITION_ID, -$276)
End Proc[R]
' 636 $fd84 -$027c NewObjectA(class,classID,tagList)(a0/a1/a2)
Procedure _NEW_OBJECT_A[P_CLASS,P_CLASS_ID,P_TAG_LIST]
 Areg(0) = P_CLASS
 Areg(1) = P_CLASS_ID
 Areg(2) = P_TAG_LIST
 R=Lib Call(_INTUITION_ID, -$27C)
End Proc[R]
' 642 $fd7e -$0282 DisposeObject(object)(a0)
Procedure _DISPOSE_OBJECT[P_OBJECT]
 Areg(0) = P_OBJECT
 R=Lib Call(_INTUITION_ID, -$282)
End Proc[R]
' 648 $fd78 -$0288 SetAttrsA(object,tagList)(a0/a1)
Procedure _SET_ATTRS_A[P_OBJECT,P_TAG_LIST]
 Areg(0) = P_OBJECT
 Areg(1) = P_TAG_LIST
 R=Lib Call(_INTUITION_ID, -$288)
End Proc[R]
' 654 $fd72 -$028e GetAttr(attrID,object,storagePtr)(d0/a0/a1)
Procedure _GET_ATTR[P_ATTR_ID,P_OBJECT,P_STORAGE_PTR]
 Dreg(0) = P_ATTR_ID
 Areg(0) = P_OBJECT
 Areg(1) = P_STORAGE_PTR
 R=Lib Call(_INTUITION_ID, -$28E)
End Proc[R]
' 660 $fd6c -$0294 SetGadgetAttrsA(gadget,window,requester,tagList)(a0/a1/a2/a3)
Procedure _SET_GADGET_ATTRS_A[P_GADGET,P_WINDOW,P_REQUESTER,P_TAG_LIST]
 Areg(0) = P_GADGET
 Areg(1) = P_WINDOW
 Areg(2) = P_REQUESTER
 Areg(3) = P_TAG_LIST
 R=Lib Call(_INTUITION_ID, -$294)
End Proc[R]
' 666 $fd66 -$029a NextObject(objectPtrPtr)(a0)
Procedure _NEXT_OBJECT[P_OBJECT_PTR_PTR]
 Areg(0) = P_OBJECT_PTR_PTR
 R=Lib Call(_INTUITION_ID, -$29A)
End Proc[R]
' 678 $fd5a -$02a6 MakeClass(classID,superClassID,superClassPtr,instanceSize,flags)(a0/a1/a2,d0/d1)
Procedure _MAKE_CLASS[P_CLASS_ID,P_SUPER_CLASS_ID,P_SUPER_CLASS_PTR,P_INSTANCE_SIZE,P_FLAGS]
 Areg(0) = P_CLASS_ID
 Areg(1) = P_SUPER_CLASS_ID
 Areg(2) = P_SUPER_CLASS_PTR
 Dreg(0) = P_INSTANCE_SIZE
 Dreg(1) = P_FLAGS
 R=Lib Call(_INTUITION_ID, -$2A6)
End Proc[R]
' 684 $fd54 -$02ac AddClass(class)(a0)
Procedure _ADD_CLASS[P_CLASS]
 Areg(0) = P_CLASS
 R=Lib Call(_INTUITION_ID, -$2AC)
End Proc[R]
' 690 $fd4e -$02b2 GetScreenDrawInfo(screen)(a0)
Procedure _GET_SCREEN_DRAW_INFO[P_SCREEN]
 Areg(0) = P_SCREEN
 R=Lib Call(_INTUITION_ID, -$2B2)
End Proc[R]
' 696 $fd48 -$02b8 FreeScreenDrawInfo(screen,drawInfo)(a0/a1)
Procedure _FREE_SCREEN_DRAW_INFO[P_SCREEN,P_DRAW_INFO]
 Areg(0) = P_SCREEN
 Areg(1) = P_DRAW_INFO
 R=Lib Call(_INTUITION_ID, -$2B8)
End Proc[R]
' 702 $fd42 -$02be ResetMenuStrip(window,menu)(a0/a1)
Procedure _RESET_MENU_STRIP[P_WINDOW,P_MENU]
 Areg(0) = P_WINDOW
 Areg(1) = P_MENU
 R=Lib Call(_INTUITION_ID, -$2BE)
End Proc[R]
' 708 $fd3c -$02c4 RemoveClass(classPtr)(a0)
Procedure _REMOVE_CLASS[P_CLASS_PTR]
 Areg(0) = P_CLASS_PTR
 R=Lib Call(_INTUITION_ID, -$2C4)
End Proc[R]
' 714 $fd36 -$02ca FreeClass(classPtr)(a0)
Procedure _FREE_CLASS[P_CLASS_PTR]
 Areg(0) = P_CLASS_PTR
 R=Lib Call(_INTUITION_ID, -$2CA)
End Proc[R]
