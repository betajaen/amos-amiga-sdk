' expansion
_EXPANSION_BASE = 0 : _EXPANSION_ID = 0
Global _EXPANSION_BASE, _EXPANSION_ID
Procedure LIB_OPEN_EXPANSION[P_ID]
 Lib Open P_ID, "", 0
 _EXPANSION_BASE = Lib Base(P_ID)
 _EXPANSION_ID = P_ID
End Proc[_EXPANSION_BASE]
Procedure LIB_CLOSE_EXPANSION
 Lib Close _EXPANSION_ID
End Proc
'  30 $ffe2 -$001e AddConfigDev(configDev)(a0)
Procedure _ADD_CONFIG_DEV[P_CONFIG_DEV]
 Areg(0) = P_CONFIG_DEV
 R=Lib Call(_EXPANSION_ID, -$1E)
End Proc[R]
'  36 $ffdc -$0024 AddBootNode(bootPri,flags,deviceNode,configDev)(d0/d1/a0/a1)
Procedure _ADD_BOOT_NODE[P_BOOT_PRI,P_FLAGS,P_DEVICE_NODE,P_CONFIG_DEV]
 Dreg(0) = P_BOOT_PRI
 Dreg(1) = P_FLAGS
 Areg(0) = P_DEVICE_NODE
 Areg(1) = P_CONFIG_DEV
 R=Lib Call(_EXPANSION_ID, -$24)
End Proc[R]
'  42 $ffd6 -$002a AllocBoardMem(slotSpec)(d0)
Procedure _ALLOC_BOARD_MEM[P_SLOT_SPEC]
 Dreg(0) = P_SLOT_SPEC
 R=Lib Call(_EXPANSION_ID, -$2A)
End Proc[R]
'  48 $ffd0 -$0030 AllocConfigDev()()
Procedure _ALLOC_CONFIG_DEV
 R=Lib Call(_EXPANSION_ID, -$30)
End Proc[R]
'  54 $ffca -$0036 AllocExpansionMem(numSlots,slotAlign)(d0/d1)
Procedure _ALLOC_EXPANSION_MEM[P_NUM_SLOTS,P_SLOT_ALIGN]
 Dreg(0) = P_NUM_SLOTS
 Dreg(1) = P_SLOT_ALIGN
 R=Lib Call(_EXPANSION_ID, -$36)
End Proc[R]
'  60 $ffc4 -$003c ConfigBoard(board,configDev)(a0/a1)
Procedure _CONFIG_BOARD[P_BOARD,P_CONFIG_DEV]
 Areg(0) = P_BOARD
 Areg(1) = P_CONFIG_DEV
 R=Lib Call(_EXPANSION_ID, -$3C)
End Proc[R]
'  66 $ffbe -$0042 ConfigChain(baseAddr)(a0)
Procedure _CONFIG_CHAIN[P_BASE_ADDR]
 Areg(0) = P_BASE_ADDR
 R=Lib Call(_EXPANSION_ID, -$42)
End Proc[R]
'  72 $ffb8 -$0048 FindConfigDev(oldConfigDev,manufacturer,product)(a0,d0/d1)
Procedure _FIND_CONFIG_DEV[P_OLD_CONFIG_DEV,P_MANUFACTURER,P_PRODUCT]
 Areg(0) = P_OLD_CONFIG_DEV
 Dreg(0) = P_MANUFACTURER
 Dreg(1) = P_PRODUCT
 R=Lib Call(_EXPANSION_ID, -$48)
End Proc[R]
'  78 $ffb2 -$004e FreeBoardMem(startSlot,slotSpec)(d0/d1)
Procedure _FREE_BOARD_MEM[P_START_SLOT,P_SLOT_SPEC]
 Dreg(0) = P_START_SLOT
 Dreg(1) = P_SLOT_SPEC
 R=Lib Call(_EXPANSION_ID, -$4E)
End Proc[R]
'  84 $ffac -$0054 FreeConfigDev(configDev)(a0)
Procedure _FREE_CONFIG_DEV[P_CONFIG_DEV]
 Areg(0) = P_CONFIG_DEV
 R=Lib Call(_EXPANSION_ID, -$54)
End Proc[R]
'  90 $ffa6 -$005a FreeExpansionMem(startSlot,numSlots)(d0/d1)
Procedure _FREE_EXPANSION_MEM[P_START_SLOT,P_NUM_SLOTS]
 Dreg(0) = P_START_SLOT
 Dreg(1) = P_NUM_SLOTS
 R=Lib Call(_EXPANSION_ID, -$5A)
End Proc[R]
'  96 $ffa0 -$0060 ReadExpansionByte(board,offset)(a0,d0)
Procedure _READ_EXPANSION_BYTE[P_BOARD,P_OFFSET]
 Areg(0) = P_BOARD
 Dreg(0) = P_OFFSET
 R=Lib Call(_EXPANSION_ID, -$60)
End Proc[R]
' 102 $ff9a -$0066 ReadExpansionRom(board,configDev)(a0/a1)
Procedure _READ_EXPANSION_ROM[P_BOARD,P_CONFIG_DEV]
 Areg(0) = P_BOARD
 Areg(1) = P_CONFIG_DEV
 R=Lib Call(_EXPANSION_ID, -$66)
End Proc[R]
' 108 $ff94 -$006c RemConfigDev(configDev)(a0)
Procedure _REM_CONFIG_DEV[P_CONFIG_DEV]
 Areg(0) = P_CONFIG_DEV
 R=Lib Call(_EXPANSION_ID, -$6C)
End Proc[R]
' 114 $ff8e -$0072 WriteExpansionByte(board,offset,byte)(a0,d0/d1)
Procedure _WRITE_EXPANSION_BYTE[P_BOARD,P_OFFSET,P_BYTE]
 Areg(0) = P_BOARD
 Dreg(0) = P_OFFSET
 Dreg(1) = P_BYTE
 R=Lib Call(_EXPANSION_ID, -$72)
End Proc[R]
' 120 $ff88 -$0078 ObtainConfigBinding()()
Procedure _OBTAIN_CONFIG_BINDING
 R=Lib Call(_EXPANSION_ID, -$78)
End Proc[R]
' 126 $ff82 -$007e ReleaseConfigBinding()()
Procedure _RELEASE_CONFIG_BINDING
 R=Lib Call(_EXPANSION_ID, -$7E)
End Proc[R]
' 132 $ff7c -$0084 SetCurrentBinding(currentBinding,bindingSize)(a0,d0)
Procedure _SET_CURRENT_BINDING[P_CURRENT_BINDING,P_BINDING_SIZE]
 Areg(0) = P_CURRENT_BINDING
 Dreg(0) = P_BINDING_SIZE
 R=Lib Call(_EXPANSION_ID, -$84)
End Proc[R]
' 138 $ff76 -$008a GetCurrentBinding(currentBinding,bindingSize)(a0,d0)
Procedure _GET_CURRENT_BINDING[P_CURRENT_BINDING,P_BINDING_SIZE]
 Areg(0) = P_CURRENT_BINDING
 Dreg(0) = P_BINDING_SIZE
 R=Lib Call(_EXPANSION_ID, -$8A)
End Proc[R]
' 144 $ff70 -$0090 MakeDosNode(parmPacket)(a0)
Procedure _MAKE_DOS_NODE[P_PARM_PACKET]
 Areg(0) = P_PARM_PACKET
 R=Lib Call(_EXPANSION_ID, -$90)
End Proc[R]
' 150 $ff6a -$0096 AddDosNode(bootPri,flags,deviceNode)(d0/d1/a0)
Procedure _ADD_DOS_NODE[P_BOOT_PRI,P_FLAGS,P_DEVICE_NODE]
 Dreg(0) = P_BOOT_PRI
 Dreg(1) = P_FLAGS
 Areg(0) = P_DEVICE_NODE
 R=Lib Call(_EXPANSION_ID, -$96)
End Proc[R]
