' timer
_TIMER_BASE = 0 : _TIMER_ID = 0
Global _TIMER_BASE, _TIMER_ID
Procedure LIB_OPEN_TIMER[P_ID]
 Lib Open P_ID, "Timer.Device", 0
 _TIMER_BASE = Lib Base(P_ID)
 _TIMER_ID = P_ID
End Proc[_TIMER_BASE]
Procedure LIB_CLOSE_TIMER
 Lib Close _TIMER_ID
End Proc
'  42 $ffd6 -$002a AddTime(dest,src)(a0/a1)
Procedure _ADD_TIME[P_DEST,P_SRC]
 Areg(0) = P_DEST
 Areg(1) = P_SRC
 R=Lib Call(_TIMER_ID, -$2A)
End Proc[R]
'  48 $ffd0 -$0030 SubTime(dest,src)(a0/a1)
Procedure _SUB_TIME[P_DEST,P_SRC]
 Areg(0) = P_DEST
 Areg(1) = P_SRC
 R=Lib Call(_TIMER_ID, -$30)
End Proc[R]
'  54 $ffca -$0036 CmpTime(dest,src)(a0/a1)
Procedure _CMP_TIME[P_DEST,P_SRC]
 Areg(0) = P_DEST
 Areg(1) = P_SRC
 R=Lib Call(_TIMER_ID, -$36)
End Proc[R]
'  60 $ffc4 -$003c ReadEClock(dest)(a0)
Procedure _READ_E_CLOCK[P_DEST]
 Areg(0) = P_DEST
 R=Lib Call(_TIMER_ID, -$3C)
End Proc[R]
'  66 $ffbe -$0042 GetSysTime(dest)(a0)
Procedure _GET_SYS_TIME[P_DEST]
 Areg(0) = P_DEST
 R=Lib Call(_TIMER_ID, -$42)
End Proc[R]
