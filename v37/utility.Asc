' utility
_UTILITY_BASE = 0 : _UTILITY_ID = 0
Global _UTILITY_BASE, _UTILITY_ID
Procedure LIB_OPEN_UTILITY[P_ID]
 Lib Open P_ID, "utility.library", 0
 _UTILITY_BASE = Lib Base(P_ID)
 _UTILITY_ID = P_ID
End Proc[_UTILITY_BASE]
Procedure LIB_CLOSE_UTILITY
 Lib Close _UTILITY_ID
End Proc
'  30 $ffe2 -$001e FindTagItem(tagVal,tagList)(d0/a0)
Procedure _FIND_TAG_ITEM[P_TAG_VAL,P_TAG_LIST]
 Dreg(0) = P_TAG_VAL
 Areg(0) = P_TAG_LIST
 R=Lib Call(_UTILITY_ID, -$1E)
End Proc[R]
'  36 $ffdc -$0024 GetTagData(tagVal,defaultVal,tagList)(d0/d1/a0)
Procedure _GET_TAG_DATA[P_TAG_VAL,P_DEFAULT_VAL,P_TAG_LIST]
 Dreg(0) = P_TAG_VAL
 Dreg(1) = P_DEFAULT_VAL
 Areg(0) = P_TAG_LIST
 R=Lib Call(_UTILITY_ID, -$24)
End Proc[R]
'  42 $ffd6 -$002a PackBoolTags(initialFlags,tagList,boolMap)(d0/a0/a1)
Procedure _PACK_BOOL_TAGS[P_INITIAL_FLAGS,P_TAG_LIST,P_BOOL_MAP]
 Dreg(0) = P_INITIAL_FLAGS
 Areg(0) = P_TAG_LIST
 Areg(1) = P_BOOL_MAP
 R=Lib Call(_UTILITY_ID, -$2A)
End Proc[R]
'  48 $ffd0 -$0030 NextTagItem(tagListPtr)(a0)
Procedure _NEXT_TAG_ITEM[P_TAG_LIST_PTR]
 Areg(0) = P_TAG_LIST_PTR
 R=Lib Call(_UTILITY_ID, -$30)
End Proc[R]
'  54 $ffca -$0036 FilterTagChanges(newTagList,oldTagList,apply)(a0/a1,d0)
Procedure _FILTER_TAG_CHANGES[P_NEW_TAG_LIST,P_OLD_TAG_LIST,P_APPLY]
 Areg(0) = P_NEW_TAG_LIST
 Areg(1) = P_OLD_TAG_LIST
 Dreg(0) = P_APPLY
 R=Lib Call(_UTILITY_ID, -$36)
End Proc[R]
'  60 $ffc4 -$003c MapTags(tagList,mapList,includeMiss)(a0/a1,d0)
Procedure _MAP_TAGS[P_TAG_LIST,P_MAP_LIST,P_INCLUDE_MISS]
 Areg(0) = P_TAG_LIST
 Areg(1) = P_MAP_LIST
 Dreg(0) = P_INCLUDE_MISS
 R=Lib Call(_UTILITY_ID, -$3C)
End Proc[R]
'  66 $ffbe -$0042 AllocateTagItems(numItems)(d0)
Procedure _ALLOCATE_TAG_ITEMS[P_NUM_ITEMS]
 Dreg(0) = P_NUM_ITEMS
 R=Lib Call(_UTILITY_ID, -$42)
End Proc[R]
'  72 $ffb8 -$0048 CloneTagItems(tagList)(a0)
Procedure _CLONE_TAG_ITEMS[P_TAG_LIST]
 Areg(0) = P_TAG_LIST
 R=Lib Call(_UTILITY_ID, -$48)
End Proc[R]
'  78 $ffb2 -$004e FreeTagItems(tagList)(a0)
Procedure _FREE_TAG_ITEMS[P_TAG_LIST]
 Areg(0) = P_TAG_LIST
 R=Lib Call(_UTILITY_ID, -$4E)
End Proc[R]
'  84 $ffac -$0054 RefreshTagItemClones(cloneList,origList)(a0/a1)
Procedure _REFRESH_TAG_ITEM_CLONES[P_CLONE_LIST,P_ORIG_LIST]
 Areg(0) = P_CLONE_LIST
 Areg(1) = P_ORIG_LIST
 R=Lib Call(_UTILITY_ID, -$54)
End Proc[R]
'  90 $ffa6 -$005a TagInArray(tagVal,tagArray)(d0/a0)
Procedure _TAG_IN_ARRAY[P_TAG_VAL,P_TAG_ARRAY]
 Dreg(0) = P_TAG_VAL
 Areg(0) = P_TAG_ARRAY
 R=Lib Call(_UTILITY_ID, -$5A)
End Proc[R]
'  96 $ffa0 -$0060 FilterTagItems(tagList,filterArray,logic)(a0/a1,d0)
Procedure _FILTER_TAG_ITEMS[P_TAG_LIST,P_FILTER_ARRAY,P_LOGIC]
 Areg(0) = P_TAG_LIST
 Areg(1) = P_FILTER_ARRAY
 Dreg(0) = P_LOGIC
 R=Lib Call(_UTILITY_ID, -$60)
End Proc[R]
' 102 $ff9a -$0066 CallHookPkt(hook,object,paramPacket)(a0/a2,a1)
Procedure _CALL_HOOK_PKT[P_HOOK,P_OBJECT,P_PARAM_PACKET]
 Areg(0) = P_HOOK
 Areg(2) = P_OBJECT
 Areg(1) = P_PARAM_PACKET
 R=Lib Call(_UTILITY_ID, -$66)
End Proc[R]
' 120 $ff88 -$0078 Amiga2Date(amigaTime,date)(d0/a0)
Procedure _AMIGA2_DATE[P_AMIGA_TIME,P_DATE]
 Dreg(0) = P_AMIGA_TIME
 Areg(0) = P_DATE
 R=Lib Call(_UTILITY_ID, -$78)
End Proc[R]
' 126 $ff82 -$007e Date2Amiga(date)(a0)
Procedure _DATE2_AMIGA[P_DATE]
 Areg(0) = P_DATE
 R=Lib Call(_UTILITY_ID, -$7E)
End Proc[R]
' 132 $ff7c -$0084 CheckDate(date)(a0)
Procedure _CHECK_DATE[P_DATE]
 Areg(0) = P_DATE
 R=Lib Call(_UTILITY_ID, -$84)
End Proc[R]
' 138 $ff76 -$008a SMult32(factor1,factor2)(d0/d1)
Procedure _S_MULT32[P_FACTOR1,P_FACTOR2]
 Dreg(0) = P_FACTOR1
 Dreg(1) = P_FACTOR2
 R=Lib Call(_UTILITY_ID, -$8A)
End Proc[R]
' 144 $ff70 -$0090 UMult32(factor1,factor2)(d0/d1)
Procedure _U_MULT32[P_FACTOR1,P_FACTOR2]
 Dreg(0) = P_FACTOR1
 Dreg(1) = P_FACTOR2
 R=Lib Call(_UTILITY_ID, -$90)
End Proc[R]
' 150 $ff6a -$0096 SDivMod32(dividend,divisor)(d0/d1)
Procedure _S_DIV_MOD32[P_DIVIDEND,P_DIVISOR]
 Dreg(0) = P_DIVIDEND
 Dreg(1) = P_DIVISOR
 R=Lib Call(_UTILITY_ID, -$96)
End Proc[R]
' 156 $ff64 -$009c UDivMod32(dividend,divisor)(d0/d1)
Procedure _U_DIV_MOD32[P_DIVIDEND,P_DIVISOR]
 Dreg(0) = P_DIVIDEND
 Dreg(1) = P_DIVISOR
 R=Lib Call(_UTILITY_ID, -$9C)
End Proc[R]
' 162 $ff5e -$00a2 Stricmp(string1,string2)(a0/a1)
Procedure _STRICMP[P_STRING1,P_STRING2]
 Areg(0) = P_STRING1
 Areg(1) = P_STRING2
 R=Lib Call(_UTILITY_ID, -$A2)
End Proc[R]
' 168 $ff58 -$00a8 Strnicmp(string1,string2,length)(a0/a1,d0)
Procedure _STRNICMP[P_STRING1,P_STRING2,P_LENGTH]
 Areg(0) = P_STRING1
 Areg(1) = P_STRING2
 Dreg(0) = P_LENGTH
 R=Lib Call(_UTILITY_ID, -$A8)
End Proc[R]
' 174 $ff52 -$00ae ToUpper(character)(d0)
Procedure _TO_UPPER[P_CHARACTER]
 Dreg(0) = P_CHARACTER
 R=Lib Call(_UTILITY_ID, -$AE)
End Proc[R]
' 180 $ff4c -$00b4 ToLower(character)(d0)
Procedure _TO_LOWER[P_CHARACTER]
 Dreg(0) = P_CHARACTER
 R=Lib Call(_UTILITY_ID, -$B4)
End Proc[R]
