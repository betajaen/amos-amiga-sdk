' layers
_LAYERS_BASE = 0 : _LAYERS_ID = 0
Global _LAYERS_BASE, _LAYERS_ID
Procedure LIB_OPEN_LAYERS[P_ID]
 Lib Open P_ID, "layers.library", 0
 _LAYERS_BASE = Lib Base(P_ID)
 _LAYERS_ID = P_ID
End Proc[_LAYERS_BASE]
Procedure LIB_CLOSE_LAYERS
 Lib Close _LAYERS_ID
End Proc
'  30 $ffe2 -$001e InitLayers(li)(a0)
Procedure _INIT_LAYERS[P_LI]
 Areg(0) = P_LI
 R=Lib Call(_LAYERS_ID, -$1E)
End Proc[R]
'  36 $ffdc -$0024 CreateUpfrontLayer(li,bm,x0,y0,x1,y1,flags,bm2)(a0/a1,d0/d1/d2/d3/d4/a2)
Procedure _CREATE_UPFRONT_LAYER[P_LI,P_BM,P_X0,P_Y0,P_X1,P_Y1,P_FLAGS,P_BM2]
 Areg(0) = P_LI
 Areg(1) = P_BM
 Dreg(0) = P_X0
 Dreg(1) = P_Y0
 Dreg(2) = P_X1
 Dreg(3) = P_Y1
 Dreg(4) = P_FLAGS
 Areg(2) = P_BM2
 R=Lib Call(_LAYERS_ID, -$24)
End Proc[R]
'  42 $ffd6 -$002a CreateBehindLayer(li,bm,x0,y0,x1,y1,flags,bm2)(a0/a1,d0/d1/d2/d3/d4/a2)
Procedure _CREATE_BEHIND_LAYER[P_LI,P_BM,P_X0,P_Y0,P_X1,P_Y1,P_FLAGS,P_BM2]
 Areg(0) = P_LI
 Areg(1) = P_BM
 Dreg(0) = P_X0
 Dreg(1) = P_Y0
 Dreg(2) = P_X1
 Dreg(3) = P_Y1
 Dreg(4) = P_FLAGS
 Areg(2) = P_BM2
 R=Lib Call(_LAYERS_ID, -$2A)
End Proc[R]
'  48 $ffd0 -$0030 UpfrontLayer(dummy,layer)(a0/a1)
Procedure _UPFRONT_LAYER[P_DUMMY,P_LAYER]
 Areg(0) = P_DUMMY
 Areg(1) = P_LAYER
 R=Lib Call(_LAYERS_ID, -$30)
End Proc[R]
'  54 $ffca -$0036 BehindLayer(dummy,layer)(a0/a1)
Procedure _BEHIND_LAYER[P_DUMMY,P_LAYER]
 Areg(0) = P_DUMMY
 Areg(1) = P_LAYER
 R=Lib Call(_LAYERS_ID, -$36)
End Proc[R]
'  60 $ffc4 -$003c MoveLayer(dummy,layer,dx,dy)(a0/a1,d0/d1)
Procedure _MOVE_LAYER[P_DUMMY,P_LAYER,P_DX,P_DY]
 Areg(0) = P_DUMMY
 Areg(1) = P_LAYER
 Dreg(0) = P_DX
 Dreg(1) = P_DY
 R=Lib Call(_LAYERS_ID, -$3C)
End Proc[R]
'  66 $ffbe -$0042 SizeLayer(dummy,layer,dx,dy)(a0/a1,d0/d1)
Procedure _SIZE_LAYER[P_DUMMY,P_LAYER,P_DX,P_DY]
 Areg(0) = P_DUMMY
 Areg(1) = P_LAYER
 Dreg(0) = P_DX
 Dreg(1) = P_DY
 R=Lib Call(_LAYERS_ID, -$42)
End Proc[R]
'  72 $ffb8 -$0048 ScrollLayer(dummy,layer,dx,dy)(a0/a1,d0/d1)
Procedure _SCROLL_LAYER[P_DUMMY,P_LAYER,P_DX,P_DY]
 Areg(0) = P_DUMMY
 Areg(1) = P_LAYER
 Dreg(0) = P_DX
 Dreg(1) = P_DY
 R=Lib Call(_LAYERS_ID, -$48)
End Proc[R]
'  78 $ffb2 -$004e BeginUpdate(l)(a0)
Procedure _BEGIN_UPDATE[P_L]
 Areg(0) = P_L
 R=Lib Call(_LAYERS_ID, -$4E)
End Proc[R]
'  84 $ffac -$0054 EndUpdate(layer,flag)(a0,d0)
Procedure _END_UPDATE[P_LAYER,P_FLAG]
 Areg(0) = P_LAYER
 Dreg(0) = P_FLAG
 R=Lib Call(_LAYERS_ID, -$54)
End Proc[R]
'  90 $ffa6 -$005a DeleteLayer(dummy,layer)(a0/a1)
Procedure _DELETE_LAYER[P_DUMMY,P_LAYER]
 Areg(0) = P_DUMMY
 Areg(1) = P_LAYER
 R=Lib Call(_LAYERS_ID, -$5A)
End Proc[R]
'  96 $ffa0 -$0060 LockLayer(dummy,layer)(a0/a1)
Procedure _LOCK_LAYER[P_DUMMY,P_LAYER]
 Areg(0) = P_DUMMY
 Areg(1) = P_LAYER
 R=Lib Call(_LAYERS_ID, -$60)
End Proc[R]
' 102 $ff9a -$0066 UnlockLayer(layer)(a0)
Procedure _UNLOCK_LAYER[P_LAYER]
 Areg(0) = P_LAYER
 R=Lib Call(_LAYERS_ID, -$66)
End Proc[R]
' 108 $ff94 -$006c LockLayers(li)(a0)
Procedure _LOCK_LAYERS[P_LI]
 Areg(0) = P_LI
 R=Lib Call(_LAYERS_ID, -$6C)
End Proc[R]
' 114 $ff8e -$0072 UnlockLayers(li)(a0)
Procedure _UNLOCK_LAYERS[P_LI]
 Areg(0) = P_LI
 R=Lib Call(_LAYERS_ID, -$72)
End Proc[R]
' 120 $ff88 -$0078 LockLayerInfo(li)(a0)
Procedure _LOCK_LAYER_INFO[P_LI]
 Areg(0) = P_LI
 R=Lib Call(_LAYERS_ID, -$78)
End Proc[R]
' 126 $ff82 -$007e SwapBitsRastPortClipRect(rp,cr)(a0/a1)
Procedure _SWAP_BITS_RAST_PORT_CLIP_RECT[P_RP,P_CR]
 Areg(0) = P_RP
 Areg(1) = P_CR
 R=Lib Call(_LAYERS_ID, -$7E)
End Proc[R]
' 132 $ff7c -$0084 WhichLayer(li,x,y)(a0,d0/d1)
Procedure _WHICH_LAYER[P_LI,P_X,P_Y]
 Areg(0) = P_LI
 Dreg(0) = P_X
 Dreg(1) = P_Y
 R=Lib Call(_LAYERS_ID, -$84)
End Proc[R]
' 138 $ff76 -$008a UnlockLayerInfo(li)(a0)
Procedure _UNLOCK_LAYER_INFO[P_LI]
 Areg(0) = P_LI
 R=Lib Call(_LAYERS_ID, -$8A)
End Proc[R]
' 144 $ff70 -$0090 NewLayerInfo()()
Procedure _NEW_LAYER_INFO
 R=Lib Call(_LAYERS_ID, -$90)
End Proc[R]
' 150 $ff6a -$0096 DisposeLayerInfo(li)(a0)
Procedure _DISPOSE_LAYER_INFO[P_LI]
 Areg(0) = P_LI
 R=Lib Call(_LAYERS_ID, -$96)
End Proc[R]
' 156 $ff64 -$009c FattenLayerInfo(li)(a0)
Procedure _FATTEN_LAYER_INFO[P_LI]
 Areg(0) = P_LI
 R=Lib Call(_LAYERS_ID, -$9C)
End Proc[R]
' 162 $ff5e -$00a2 ThinLayerInfo(li)(a0)
Procedure _THIN_LAYER_INFO[P_LI]
 Areg(0) = P_LI
 R=Lib Call(_LAYERS_ID, -$A2)
End Proc[R]
' 168 $ff58 -$00a8 MoveLayerInFrontOf(layer_to_move,other_layer)(a0/a1)
Procedure _MOVE_LAYER_IN_FRONT_OF[P_LAYER_TO_MOVE,P_OTHER_LAYER]
 Areg(0) = P_LAYER_TO_MOVE
 Areg(1) = P_OTHER_LAYER
 R=Lib Call(_LAYERS_ID, -$A8)
End Proc[R]
' 174 $ff52 -$00ae InstallClipRegion(layer,region)(a0/a1)
Procedure _INSTALL_CLIP_REGION[P_LAYER,P_REGION]
 Areg(0) = P_LAYER
 Areg(1) = P_REGION
 R=Lib Call(_LAYERS_ID, -$AE)
End Proc[R]
' 180 $ff4c -$00b4 MoveSizeLayer(layer,dx,dy,dw,dh)(a0,d0/d1/d2/d3)
Procedure _MOVE_SIZE_LAYER[P_LAYER,P_DX,P_DY,P_DW,P_DH]
 Areg(0) = P_LAYER
 Dreg(0) = P_DX
 Dreg(1) = P_DY
 Dreg(2) = P_DW
 Dreg(3) = P_DH
 R=Lib Call(_LAYERS_ID, -$B4)
End Proc[R]
' 186 $ff46 -$00ba CreateUpfrontHookLayer(li,bm,x0,y0,x1,y1,flags,hook,bm2)(a0/a1,d0/d1/d2/d3/d4/a3,a2)
Procedure _CREATE_UPFRONT_HOOK_LAYER[P_LI,P_BM,P_X0,P_Y0,P_X1,P_Y1,P_FLAGS,P_HOOK,P_BM2]
 Areg(0) = P_LI
 Areg(1) = P_BM
 Dreg(0) = P_X0
 Dreg(1) = P_Y0
 Dreg(2) = P_X1
 Dreg(3) = P_Y1
 Dreg(4) = P_FLAGS
 Areg(3) = P_HOOK
 Areg(2) = P_BM2
 R=Lib Call(_LAYERS_ID, -$BA)
End Proc[R]
' 192 $ff40 -$00c0 CreateBehindHookLayer(li,bm,x0,y0,x1,y1,flags,hook,bm2)(a0/a1,d0/d1/d2/d3/d4/a3,a2)
Procedure _CREATE_BEHIND_HOOK_LAYER[P_LI,P_BM,P_X0,P_Y0,P_X1,P_Y1,P_FLAGS,P_HOOK,P_BM2]
 Areg(0) = P_LI
 Areg(1) = P_BM
 Dreg(0) = P_X0
 Dreg(1) = P_Y0
 Dreg(2) = P_X1
 Dreg(3) = P_Y1
 Dreg(4) = P_FLAGS
 Areg(3) = P_HOOK
 Areg(2) = P_BM2
 R=Lib Call(_LAYERS_ID, -$C0)
End Proc[R]
' 198 $ff3a -$00c6 InstallLayerHook(layer,hook)(a0/a1)
Procedure _INSTALL_LAYER_HOOK[P_LAYER,P_HOOK]
 Areg(0) = P_LAYER
 Areg(1) = P_HOOK
 R=Lib Call(_LAYERS_ID, -$C6)
End Proc[R]
