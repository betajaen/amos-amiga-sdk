' rexxsyslib
_REXX_SYS_BASE = 0 : _REXXSYSLIB_ID = 0
Global _REXX_SYS_BASE, _REXXSYSLIB_ID
Procedure LIB_OPEN_REXXSYSLIB[P_ID]
 Lib Open P_ID, "rexxsyslib.library", 0
 _REXX_SYS_BASE = Lib Base(P_ID)
 _REXXSYSLIB_ID = P_ID
End Proc[_REXX_SYS_BASE]
Procedure LIB_CLOSE_REXXSYSLIB
 Lib Close _REXXSYSLIB_ID
End Proc
' 126 $ff82 -$007e CreateArgstring(string,length)(a0,d0)
Procedure _CREATE_ARGSTRING[P_STRING,P_LENGTH]
 Areg(0) = P_STRING
 Dreg(0) = P_LENGTH
 R=Lib Call(_REXXSYSLIB_ID, -$7E)
End Proc[R]
' 132 $ff7c -$0084 DeleteArgstring(argstring)(a0)
Procedure _DELETE_ARGSTRING[P_ARGSTRING]
 Areg(0) = P_ARGSTRING
 R=Lib Call(_REXXSYSLIB_ID, -$84)
End Proc[R]
' 138 $ff76 -$008a LengthArgstring(argstring)(a0)
Procedure _LENGTH_ARGSTRING[P_ARGSTRING]
 Areg(0) = P_ARGSTRING
 R=Lib Call(_REXXSYSLIB_ID, -$8A)
End Proc[R]
' 144 $ff70 -$0090 CreateRexxMsg(port,extension,host)(a0/a1,d0)
Procedure _CREATE_REXX_MSG[P_PORT,P_EXTENSION,P_HOST]
 Areg(0) = P_PORT
 Areg(1) = P_EXTENSION
 Dreg(0) = P_HOST
 R=Lib Call(_REXXSYSLIB_ID, -$90)
End Proc[R]
' 150 $ff6a -$0096 DeleteRexxMsg(packet)(a0)
Procedure _DELETE_REXX_MSG[P_PACKET]
 Areg(0) = P_PACKET
 R=Lib Call(_REXXSYSLIB_ID, -$96)
End Proc[R]
' 156 $ff64 -$009c ClearRexxMsg(msgptr,count)(a0,d0)
Procedure _CLEAR_REXX_MSG[P_MSGPTR,P_COUNT]
 Areg(0) = P_MSGPTR
 Dreg(0) = P_COUNT
 R=Lib Call(_REXXSYSLIB_ID, -$9C)
End Proc[R]
' 162 $ff5e -$00a2 FillRexxMsg(msgptr,count,mask)(a0,d0/d1)
Procedure _FILL_REXX_MSG[P_MSGPTR,P_COUNT,P_MASK]
 Areg(0) = P_MSGPTR
 Dreg(0) = P_COUNT
 Dreg(1) = P_MASK
 R=Lib Call(_REXXSYSLIB_ID, -$A2)
End Proc[R]
' 168 $ff58 -$00a8 IsRexxMsg(msgptr)(a0)
Procedure _IS_REXX_MSG[P_MSGPTR]
 Areg(0) = P_MSGPTR
 R=Lib Call(_REXXSYSLIB_ID, -$A8)
End Proc[R]
' 450 $fe3e -$01c2 LockRexxBase(resource)(d0)
Procedure _LOCK_REXX_BASE[P_RESOURCE]
 Dreg(0) = P_RESOURCE
 R=Lib Call(_REXXSYSLIB_ID, -$1C2)
End Proc[R]
' 456 $fe38 -$01c8 UnlockRexxBase(resource)(d0)
Procedure _UNLOCK_REXX_BASE[P_RESOURCE]
 Dreg(0) = P_RESOURCE
 R=Lib Call(_REXXSYSLIB_ID, -$1C8)
End Proc[R]
