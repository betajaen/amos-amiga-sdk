' iffparse
_IFF_PARSE_BASE = 0 : _IFFPARSE_ID = 0
Global _IFF_PARSE_BASE, _IFFPARSE_ID
Procedure LIB_OPEN_IFFPARSE[P_ID]
 Lib Open P_ID, "iffparse.library", 0
 _IFF_PARSE_BASE = Lib Base(P_ID)
 _IFFPARSE_ID = P_ID
End Proc[_IFF_PARSE_BASE]
Procedure LIB_CLOSE_IFFPARSE
 Lib Close _IFFPARSE_ID
End Proc
'  30 $ffe2 -$001e AllocIFF()()
Procedure _ALLOC_IFF
 R=Lib Call(_IFFPARSE_ID, -$1E)
End Proc[R]
'  36 $ffdc -$0024 OpenIFF(iff,rwMode)(a0,d0)
Procedure _OPEN_IFF[P_IFF,P_RW_MODE]
 Areg(0) = P_IFF
 Dreg(0) = P_RW_MODE
 R=Lib Call(_IFFPARSE_ID, -$24)
End Proc[R]
'  42 $ffd6 -$002a ParseIFF(iff,control)(a0,d0)
Procedure _PARSE_IFF[P_IFF,P_CONTROL]
 Areg(0) = P_IFF
 Dreg(0) = P_CONTROL
 R=Lib Call(_IFFPARSE_ID, -$2A)
End Proc[R]
'  48 $ffd0 -$0030 CloseIFF(iff)(a0)
Procedure _CLOSE_IFF[P_IFF]
 Areg(0) = P_IFF
 R=Lib Call(_IFFPARSE_ID, -$30)
End Proc[R]
'  54 $ffca -$0036 FreeIFF(iff)(a0)
Procedure _FREE_IFF[P_IFF]
 Areg(0) = P_IFF
 R=Lib Call(_IFFPARSE_ID, -$36)
End Proc[R]
'  60 $ffc4 -$003c ReadChunkBytes(iff,buf,size)(a0/a1,d0)
Procedure _READ_CHUNK_BYTES[P_IFF,P_BUF,P_SIZE]
 Areg(0) = P_IFF
 Areg(1) = P_BUF
 Dreg(0) = P_SIZE
 R=Lib Call(_IFFPARSE_ID, -$3C)
End Proc[R]
'  66 $ffbe -$0042 WriteChunkBytes(iff,buf,size)(a0/a1,d0)
Procedure _WRITE_CHUNK_BYTES[P_IFF,P_BUF,P_SIZE]
 Areg(0) = P_IFF
 Areg(1) = P_BUF
 Dreg(0) = P_SIZE
 R=Lib Call(_IFFPARSE_ID, -$42)
End Proc[R]
'  72 $ffb8 -$0048 ReadChunkRecords(iff,buf,bytesPerRecord,nRecords)(a0/a1,d0/d1)
Procedure _READ_CHUNK_RECORDS[P_IFF,P_BUF,P_BYTES_PER_RECORD,P_N_RECORDS]
 Areg(0) = P_IFF
 Areg(1) = P_BUF
 Dreg(0) = P_BYTES_PER_RECORD
 Dreg(1) = P_N_RECORDS
 R=Lib Call(_IFFPARSE_ID, -$48)
End Proc[R]
'  78 $ffb2 -$004e WriteChunkRecords(iff,buf,bytesPerRecord,nRecords)(a0/a1,d0/d1)
Procedure _WRITE_CHUNK_RECORDS[P_IFF,P_BUF,P_BYTES_PER_RECORD,P_N_RECORDS]
 Areg(0) = P_IFF
 Areg(1) = P_BUF
 Dreg(0) = P_BYTES_PER_RECORD
 Dreg(1) = P_N_RECORDS
 R=Lib Call(_IFFPARSE_ID, -$4E)
End Proc[R]
'  84 $ffac -$0054 PushChunk(iff,type,id,size)(a0,d0/d1/d2)
Procedure _PUSH_CHUNK[P_IFF,P_TYPE,P_ID,P_SIZE]
 Areg(0) = P_IFF
 Dreg(0) = P_TYPE
 Dreg(1) = P_ID
 Dreg(2) = P_SIZE
 R=Lib Call(_IFFPARSE_ID, -$54)
End Proc[R]
'  90 $ffa6 -$005a PopChunk(iff)(a0)
Procedure _POP_CHUNK[P_IFF]
 Areg(0) = P_IFF
 R=Lib Call(_IFFPARSE_ID, -$5A)
End Proc[R]
' 102 $ff9a -$0066 EntryHandler(iff,type,id,position,handler,object)(a0,d0/d1/d2/a1/a2)
Procedure _ENTRY_HANDLER[P_IFF,P_TYPE,P_ID,P_POSITION,P_HANDLER,P_OBJECT]
 Areg(0) = P_IFF
 Dreg(0) = P_TYPE
 Dreg(1) = P_ID
 Dreg(2) = P_POSITION
 Areg(1) = P_HANDLER
 Areg(2) = P_OBJECT
 R=Lib Call(_IFFPARSE_ID, -$66)
End Proc[R]
' 108 $ff94 -$006c ExitHandler(iff,type,id,position,handler,object)(a0,d0/d1/d2/a1/a2)
Procedure _EXIT_HANDLER[P_IFF,P_TYPE,P_ID,P_POSITION,P_HANDLER,P_OBJECT]
 Areg(0) = P_IFF
 Dreg(0) = P_TYPE
 Dreg(1) = P_ID
 Dreg(2) = P_POSITION
 Areg(1) = P_HANDLER
 Areg(2) = P_OBJECT
 R=Lib Call(_IFFPARSE_ID, -$6C)
End Proc[R]
' 114 $ff8e -$0072 PropChunk(iff,type,id)(a0,d0/d1)
Procedure _PROP_CHUNK[P_IFF,P_TYPE,P_ID]
 Areg(0) = P_IFF
 Dreg(0) = P_TYPE
 Dreg(1) = P_ID
 R=Lib Call(_IFFPARSE_ID, -$72)
End Proc[R]
' 120 $ff88 -$0078 PropChunks(iff,propArray,nProps)(a0/a1,d0)
Procedure _PROP_CHUNKS[P_IFF,P_PROP_ARRAY,P_N_PROPS]
 Areg(0) = P_IFF
 Areg(1) = P_PROP_ARRAY
 Dreg(0) = P_N_PROPS
 R=Lib Call(_IFFPARSE_ID, -$78)
End Proc[R]
' 126 $ff82 -$007e StopChunk(iff,type,id)(a0,d0/d1)
Procedure _STOP_CHUNK[P_IFF,P_TYPE,P_ID]
 Areg(0) = P_IFF
 Dreg(0) = P_TYPE
 Dreg(1) = P_ID
 R=Lib Call(_IFFPARSE_ID, -$7E)
End Proc[R]
' 132 $ff7c -$0084 StopChunks(iff,propArray,nProps)(a0/a1,d0)
Procedure _STOP_CHUNKS[P_IFF,P_PROP_ARRAY,P_N_PROPS]
 Areg(0) = P_IFF
 Areg(1) = P_PROP_ARRAY
 Dreg(0) = P_N_PROPS
 R=Lib Call(_IFFPARSE_ID, -$84)
End Proc[R]
' 138 $ff76 -$008a CollectionChunk(iff,type,id)(a0,d0/d1)
Procedure _COLLECTION_CHUNK[P_IFF,P_TYPE,P_ID]
 Areg(0) = P_IFF
 Dreg(0) = P_TYPE
 Dreg(1) = P_ID
 R=Lib Call(_IFFPARSE_ID, -$8A)
End Proc[R]
' 144 $ff70 -$0090 CollectionChunks(iff,propArray,nProps)(a0/a1,d0)
Procedure _COLLECTION_CHUNKS[P_IFF,P_PROP_ARRAY,P_N_PROPS]
 Areg(0) = P_IFF
 Areg(1) = P_PROP_ARRAY
 Dreg(0) = P_N_PROPS
 R=Lib Call(_IFFPARSE_ID, -$90)
End Proc[R]
' 150 $ff6a -$0096 StopOnExit(iff,type,id)(a0,d0/d1)
Procedure _STOP_ON_EXIT[P_IFF,P_TYPE,P_ID]
 Areg(0) = P_IFF
 Dreg(0) = P_TYPE
 Dreg(1) = P_ID
 R=Lib Call(_IFFPARSE_ID, -$96)
End Proc[R]
' 156 $ff64 -$009c FindProp(iff,type,id)(a0,d0/d1)
Procedure _FIND_PROP[P_IFF,P_TYPE,P_ID]
 Areg(0) = P_IFF
 Dreg(0) = P_TYPE
 Dreg(1) = P_ID
 R=Lib Call(_IFFPARSE_ID, -$9C)
End Proc[R]
' 162 $ff5e -$00a2 FindCollection(iff,type,id)(a0,d0/d1)
Procedure _FIND_COLLECTION[P_IFF,P_TYPE,P_ID]
 Areg(0) = P_IFF
 Dreg(0) = P_TYPE
 Dreg(1) = P_ID
 R=Lib Call(_IFFPARSE_ID, -$A2)
End Proc[R]
' 168 $ff58 -$00a8 FindPropContext(iff)(a0)
Procedure _FIND_PROP_CONTEXT[P_IFF]
 Areg(0) = P_IFF
 R=Lib Call(_IFFPARSE_ID, -$A8)
End Proc[R]
' 174 $ff52 -$00ae CurrentChunk(iff)(a0)
Procedure _CURRENT_CHUNK[P_IFF]
 Areg(0) = P_IFF
 R=Lib Call(_IFFPARSE_ID, -$AE)
End Proc[R]
' 180 $ff4c -$00b4 ParentChunk(contextNode)(a0)
Procedure _PARENT_CHUNK[P_CONTEXT_NODE]
 Areg(0) = P_CONTEXT_NODE
 R=Lib Call(_IFFPARSE_ID, -$B4)
End Proc[R]
' 186 $ff46 -$00ba AllocLocalItem(type,id,ident,dataSize)(d0/d1/d2/d3)
Procedure _ALLOC_LOCAL_ITEM[P_TYPE,P_ID,P_IDENT,P_DATA_SIZE]
 Dreg(0) = P_TYPE
 Dreg(1) = P_ID
 Dreg(2) = P_IDENT
 Dreg(3) = P_DATA_SIZE
 R=Lib Call(_IFFPARSE_ID, -$BA)
End Proc[R]
' 192 $ff40 -$00c0 LocalItemData(localItem)(a0)
Procedure _LOCAL_ITEM_DATA[P_LOCAL_ITEM]
 Areg(0) = P_LOCAL_ITEM
 R=Lib Call(_IFFPARSE_ID, -$C0)
End Proc[R]
' 198 $ff3a -$00c6 SetLocalItemPurge(localItem,purgeHook)(a0/a1)
Procedure _SET_LOCAL_ITEM_PURGE[P_LOCAL_ITEM,P_PURGE_HOOK]
 Areg(0) = P_LOCAL_ITEM
 Areg(1) = P_PURGE_HOOK
 R=Lib Call(_IFFPARSE_ID, -$C6)
End Proc[R]
' 204 $ff34 -$00cc FreeLocalItem(localItem)(a0)
Procedure _FREE_LOCAL_ITEM[P_LOCAL_ITEM]
 Areg(0) = P_LOCAL_ITEM
 R=Lib Call(_IFFPARSE_ID, -$CC)
End Proc[R]
' 210 $ff2e -$00d2 FindLocalItem(iff,type,id,ident)(a0,d0/d1/d2)
Procedure _FIND_LOCAL_ITEM[P_IFF,P_TYPE,P_ID,P_IDENT]
 Areg(0) = P_IFF
 Dreg(0) = P_TYPE
 Dreg(1) = P_ID
 Dreg(2) = P_IDENT
 R=Lib Call(_IFFPARSE_ID, -$D2)
End Proc[R]
' 216 $ff28 -$00d8 StoreLocalItem(iff,localItem,position)(a0/a1,d0)
Procedure _STORE_LOCAL_ITEM[P_IFF,P_LOCAL_ITEM,P_POSITION]
 Areg(0) = P_IFF
 Areg(1) = P_LOCAL_ITEM
 Dreg(0) = P_POSITION
 R=Lib Call(_IFFPARSE_ID, -$D8)
End Proc[R]
' 222 $ff22 -$00de StoreItemInContext(iff,localItem,contextNode)(a0/a1/a2)
Procedure _STORE_ITEM_IN_CONTEXT[P_IFF,P_LOCAL_ITEM,P_CONTEXT_NODE]
 Areg(0) = P_IFF
 Areg(1) = P_LOCAL_ITEM
 Areg(2) = P_CONTEXT_NODE
 R=Lib Call(_IFFPARSE_ID, -$DE)
End Proc[R]
' 228 $ff1c -$00e4 InitIFF(iff,flags,streamHook)(a0,d0/a1)
Procedure _INIT_IFF[P_IFF,P_FLAGS,P_STREAM_HOOK]
 Areg(0) = P_IFF
 Dreg(0) = P_FLAGS
 Areg(1) = P_STREAM_HOOK
 R=Lib Call(_IFFPARSE_ID, -$E4)
End Proc[R]
' 234 $ff16 -$00ea InitIFFasDOS(iff)(a0)
Procedure _INIT_IF_FAS_DOS[P_IFF]
 Areg(0) = P_IFF
 R=Lib Call(_IFFPARSE_ID, -$EA)
End Proc[R]
' 240 $ff10 -$00f0 InitIFFasClip(iff)(a0)
Procedure _INIT_IF_FAS_CLIP[P_IFF]
 Areg(0) = P_IFF
 R=Lib Call(_IFFPARSE_ID, -$F0)
End Proc[R]
' 246 $ff0a -$00f6 OpenClipboard(unitNum)(d0)
Procedure _OPEN_CLIPBOARD[P_UNIT_NUM]
 Dreg(0) = P_UNIT_NUM
 R=Lib Call(_IFFPARSE_ID, -$F6)
End Proc[R]
' 252 $ff04 -$00fc CloseClipboard(clipboard)(a0)
Procedure _CLOSE_CLIPBOARD[P_CLIPBOARD]
 Areg(0) = P_CLIPBOARD
 R=Lib Call(_IFFPARSE_ID, -$FC)
End Proc[R]
' 258 $fefe -$0102 GoodID(id)(d0)
Procedure _GOOD_ID[P_ID]
 Dreg(0) = P_ID
 R=Lib Call(_IFFPARSE_ID, -$102)
End Proc[R]
' 264 $fef8 -$0108 GoodType(type)(d0)
Procedure _GOOD_TYPE[P_TYPE]
 Dreg(0) = P_TYPE
 R=Lib Call(_IFFPARSE_ID, -$108)
End Proc[R]
' 270 $fef2 -$010e IDtoStr(id,buf)(d0/a0)
Procedure _I_DTO_STR[P_ID,P_BUF]
 Dreg(0) = P_ID
 Areg(0) = P_BUF
 R=Lib Call(_IFFPARSE_ID, -$10E)
End Proc[R]
