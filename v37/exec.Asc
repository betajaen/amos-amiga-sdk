' exec
_SYS_BASE = 0 : _EXEC_ID = 0
Global _SYS_BASE, _EXEC_ID
Procedure LIB_OPEN_EXEC[P_ID]
 Lib Open P_ID, "", 0
 _SYS_BASE = Lib Base(P_ID)
 _EXEC_ID = P_ID
End Proc[_SYS_BASE]
Procedure LIB_CLOSE_EXEC
 Lib Close _EXEC_ID
End Proc
'  30 $ffe2 -$001e Supervisor(userFunction)(a5)
Procedure _SUPERVISOR[P_USER_FUNCTION]
 Areg(5) = P_USER_FUNCTION
 R=Lib Call(_EXEC_ID, -$1E)
End Proc[R]
'  72 $ffb8 -$0048 InitCode(startClass,version)(d0/d1)
Procedure _INIT_CODE[P_START_CLASS,P_VERSION]
 Dreg(0) = P_START_CLASS
 Dreg(1) = P_VERSION
 R=Lib Call(_EXEC_ID, -$48)
End Proc[R]
'  78 $ffb2 -$004e InitStruct(initTable,memory,size)(a1/a2,d0)
Procedure _INIT_STRUCT[P_INIT_TABLE,P_MEMORY,P_SIZE]
 Areg(1) = P_INIT_TABLE
 Areg(2) = P_MEMORY
 Dreg(0) = P_SIZE
 R=Lib Call(_EXEC_ID, -$4E)
End Proc[R]
'  84 $ffac -$0054 MakeLibrary(funcInit,structInit,libInit,dataSize,segList)(a0/a1/a2,d0/d1)
Procedure _MAKE_LIBRARY[P_FUNC_INIT,P_STRUCT_INIT,P_LIB_INIT,P_DATA_SIZE,P_SEG_LIST]
 Areg(0) = P_FUNC_INIT
 Areg(1) = P_STRUCT_INIT
 Areg(2) = P_LIB_INIT
 Dreg(0) = P_DATA_SIZE
 Dreg(1) = P_SEG_LIST
 R=Lib Call(_EXEC_ID, -$54)
End Proc[R]
'  90 $ffa6 -$005a MakeFunctions(target,functionArray,funcDispBase)(a0/a1/a2)
Procedure _MAKE_FUNCTIONS[P_TARGET,P_FUNCTION_ARRAY,P_FUNC_DISP_BASE]
 Areg(0) = P_TARGET
 Areg(1) = P_FUNCTION_ARRAY
 Areg(2) = P_FUNC_DISP_BASE
 R=Lib Call(_EXEC_ID, -$5A)
End Proc[R]
'  96 $ffa0 -$0060 FindResident(name)(a1)
Procedure _FIND_RESIDENT[P_NAME]
 Areg(1) = P_NAME
 R=Lib Call(_EXEC_ID, -$60)
End Proc[R]
' 102 $ff9a -$0066 InitResident(resident,segList)(a1,d1)
Procedure _INIT_RESIDENT[P_RESIDENT,P_SEG_LIST]
 Areg(1) = P_RESIDENT
 Dreg(1) = P_SEG_LIST
 R=Lib Call(_EXEC_ID, -$66)
End Proc[R]
' 108 $ff94 -$006c Alert(alertNum)(d7)
Procedure _ALERT[P_ALERT_NUM]
 Dreg(7) = P_ALERT_NUM
 R=Lib Call(_EXEC_ID, -$6C)
End Proc[R]
' 114 $ff8e -$0072 Debug(flags)(d0)
Procedure _DEBUG[P_FLAGS]
 Dreg(0) = P_FLAGS
 R=Lib Call(_EXEC_ID, -$72)
End Proc[R]
' 120 $ff88 -$0078 Disable()()
Procedure _DISABLE
 R=Lib Call(_EXEC_ID, -$78)
End Proc[R]
' 126 $ff82 -$007e Enable()()
Procedure _ENABLE
 R=Lib Call(_EXEC_ID, -$7E)
End Proc[R]
' 132 $ff7c -$0084 Forbid()()
Procedure _FORBID
 R=Lib Call(_EXEC_ID, -$84)
End Proc[R]
' 138 $ff76 -$008a Permit()()
Procedure _PERMIT
 R=Lib Call(_EXEC_ID, -$8A)
End Proc[R]
' 144 $ff70 -$0090 SetSR(newSR,mask)(d0/d1)
Procedure _SET_SR[P_NEW_SR,P_MASK]
 Dreg(0) = P_NEW_SR
 Dreg(1) = P_MASK
 R=Lib Call(_EXEC_ID, -$90)
End Proc[R]
' 150 $ff6a -$0096 SuperState()()
Procedure _SUPER_STATE
 R=Lib Call(_EXEC_ID, -$96)
End Proc[R]
' 156 $ff64 -$009c UserState(sysStack)(d0)
Procedure _USER_STATE[P_SYS_STACK]
 Dreg(0) = P_SYS_STACK
 R=Lib Call(_EXEC_ID, -$9C)
End Proc[R]
' 162 $ff5e -$00a2 SetIntVector(intNumber,interrupt)(d0/a1)
Procedure _SET_INT_VECTOR[P_INT_NUMBER,P_INTERRUPT]
 Dreg(0) = P_INT_NUMBER
 Areg(1) = P_INTERRUPT
 R=Lib Call(_EXEC_ID, -$A2)
End Proc[R]
' 168 $ff58 -$00a8 AddIntServer(intNumber,interrupt)(d0/a1)
Procedure _ADD_INT_SERVER[P_INT_NUMBER,P_INTERRUPT]
 Dreg(0) = P_INT_NUMBER
 Areg(1) = P_INTERRUPT
 R=Lib Call(_EXEC_ID, -$A8)
End Proc[R]
' 174 $ff52 -$00ae RemIntServer(intNumber,interrupt)(d0/a1)
Procedure _REM_INT_SERVER[P_INT_NUMBER,P_INTERRUPT]
 Dreg(0) = P_INT_NUMBER
 Areg(1) = P_INTERRUPT
 R=Lib Call(_EXEC_ID, -$AE)
End Proc[R]
' 180 $ff4c -$00b4 Cause(interrupt)(a1)
Procedure _CAUSE[P_INTERRUPT]
 Areg(1) = P_INTERRUPT
 R=Lib Call(_EXEC_ID, -$B4)
End Proc[R]
' 186 $ff46 -$00ba Allocate(freeList,byteSize)(a0,d0)
Procedure _ALLOCATE[P_FREE_LIST,P_BYTE_SIZE]
 Areg(0) = P_FREE_LIST
 Dreg(0) = P_BYTE_SIZE
 R=Lib Call(_EXEC_ID, -$BA)
End Proc[R]
' 192 $ff40 -$00c0 Deallocate(freeList,memoryBlock,byteSize)(a0/a1,d0)
Procedure _DEALLOCATE[P_FREE_LIST,P_MEMORY_BLOCK,P_BYTE_SIZE]
 Areg(0) = P_FREE_LIST
 Areg(1) = P_MEMORY_BLOCK
 Dreg(0) = P_BYTE_SIZE
 R=Lib Call(_EXEC_ID, -$C0)
End Proc[R]
' 198 $ff3a -$00c6 AllocMem(byteSize,requirements)(d0/d1)
Procedure _ALLOC_MEM[P_BYTE_SIZE,P_REQUIREMENTS]
 Dreg(0) = P_BYTE_SIZE
 Dreg(1) = P_REQUIREMENTS
 R=Lib Call(_EXEC_ID, -$C6)
End Proc[R]
' 204 $ff34 -$00cc AllocAbs(byteSize,location)(d0/a1)
Procedure _ALLOC_ABS[P_BYTE_SIZE,P_LOCATION]
 Dreg(0) = P_BYTE_SIZE
 Areg(1) = P_LOCATION
 R=Lib Call(_EXEC_ID, -$CC)
End Proc[R]
' 210 $ff2e -$00d2 FreeMem(memoryBlock,byteSize)(a1,d0)
Procedure _FREE_MEM[P_MEMORY_BLOCK,P_BYTE_SIZE]
 Areg(1) = P_MEMORY_BLOCK
 Dreg(0) = P_BYTE_SIZE
 R=Lib Call(_EXEC_ID, -$D2)
End Proc[R]
' 216 $ff28 -$00d8 AvailMem(requirements)(d1)
Procedure _AVAIL_MEM[P_REQUIREMENTS]
 Dreg(1) = P_REQUIREMENTS
 R=Lib Call(_EXEC_ID, -$D8)
End Proc[R]
' 222 $ff22 -$00de AllocEntry(entry)(a0)
Procedure _ALLOC_ENTRY[P_ENTRY]
 Areg(0) = P_ENTRY
 R=Lib Call(_EXEC_ID, -$DE)
End Proc[R]
' 228 $ff1c -$00e4 FreeEntry(entry)(a0)
Procedure _FREE_ENTRY[P_ENTRY]
 Areg(0) = P_ENTRY
 R=Lib Call(_EXEC_ID, -$E4)
End Proc[R]
' 234 $ff16 -$00ea Insert(list,node,pred)(a0/a1/a2)
Procedure _INSERT[P_LIST,P_NODE,P_PRED]
 Areg(0) = P_LIST
 Areg(1) = P_NODE
 Areg(2) = P_PRED
 R=Lib Call(_EXEC_ID, -$EA)
End Proc[R]
' 240 $ff10 -$00f0 AddHead(list,node)(a0/a1)
Procedure _ADD_HEAD[P_LIST,P_NODE]
 Areg(0) = P_LIST
 Areg(1) = P_NODE
 R=Lib Call(_EXEC_ID, -$F0)
End Proc[R]
' 246 $ff0a -$00f6 AddTail(list,node)(a0/a1)
Procedure _ADD_TAIL[P_LIST,P_NODE]
 Areg(0) = P_LIST
 Areg(1) = P_NODE
 R=Lib Call(_EXEC_ID, -$F6)
End Proc[R]
' 252 $ff04 -$00fc Remove(node)(a1)
Procedure _REMOVE[P_NODE]
 Areg(1) = P_NODE
 R=Lib Call(_EXEC_ID, -$FC)
End Proc[R]
' 258 $fefe -$0102 RemHead(list)(a0)
Procedure _REM_HEAD[P_LIST]
 Areg(0) = P_LIST
 R=Lib Call(_EXEC_ID, -$102)
End Proc[R]
' 264 $fef8 -$0108 RemTail(list)(a0)
Procedure _REM_TAIL[P_LIST]
 Areg(0) = P_LIST
 R=Lib Call(_EXEC_ID, -$108)
End Proc[R]
' 270 $fef2 -$010e Enqueue(list,node)(a0/a1)
Procedure _ENQUEUE[P_LIST,P_NODE]
 Areg(0) = P_LIST
 Areg(1) = P_NODE
 R=Lib Call(_EXEC_ID, -$10E)
End Proc[R]
' 276 $feec -$0114 FindName(list,name)(a0/a1)
Procedure _FIND_NAME[P_LIST,P_NAME]
 Areg(0) = P_LIST
 Areg(1) = P_NAME
 R=Lib Call(_EXEC_ID, -$114)
End Proc[R]
' 282 $fee6 -$011a AddTask(task,initPC,finalPC)(a1/a2/a3)
Procedure _ADD_TASK[P_TASK,P_INIT_PC,P_FINAL_PC]
 Areg(1) = P_TASK
 Areg(2) = P_INIT_PC
 Areg(3) = P_FINAL_PC
 R=Lib Call(_EXEC_ID, -$11A)
End Proc[R]
' 288 $fee0 -$0120 RemTask(task)(a1)
Procedure _REM_TASK[P_TASK]
 Areg(1) = P_TASK
 R=Lib Call(_EXEC_ID, -$120)
End Proc[R]
' 294 $feda -$0126 FindTask(name)(a1)
Procedure _FIND_TASK[P_NAME]
 Areg(1) = P_NAME
 R=Lib Call(_EXEC_ID, -$126)
End Proc[R]
' 300 $fed4 -$012c SetTaskPri(task,priority)(a1,d0)
Procedure _SET_TASK_PRI[P_TASK,P_PRIORITY]
 Areg(1) = P_TASK
 Dreg(0) = P_PRIORITY
 R=Lib Call(_EXEC_ID, -$12C)
End Proc[R]
' 306 $fece -$0132 SetSignal(newSignals,signalSet)(d0/d1)
Procedure _SET_SIGNAL[P_NEW_SIGNALS,P_SIGNAL_SET]
 Dreg(0) = P_NEW_SIGNALS
 Dreg(1) = P_SIGNAL_SET
 R=Lib Call(_EXEC_ID, -$132)
End Proc[R]
' 312 $fec8 -$0138 SetExcept(newSignals,signalSet)(d0/d1)
Procedure _SET_EXCEPT[P_NEW_SIGNALS,P_SIGNAL_SET]
 Dreg(0) = P_NEW_SIGNALS
 Dreg(1) = P_SIGNAL_SET
 R=Lib Call(_EXEC_ID, -$138)
End Proc[R]
' 318 $fec2 -$013e Wait(signalSet)(d0)
Procedure _WAIT[P_SIGNAL_SET]
 Dreg(0) = P_SIGNAL_SET
 R=Lib Call(_EXEC_ID, -$13E)
End Proc[R]
' 324 $febc -$0144 Signal(task,signalSet)(a1,d0)
Procedure _SIGNAL[P_TASK,P_SIGNAL_SET]
 Areg(1) = P_TASK
 Dreg(0) = P_SIGNAL_SET
 R=Lib Call(_EXEC_ID, -$144)
End Proc[R]
' 330 $feb6 -$014a AllocSignal(signalNum)(d0)
Procedure _ALLOC_SIGNAL[P_SIGNAL_NUM]
 Dreg(0) = P_SIGNAL_NUM
 R=Lib Call(_EXEC_ID, -$14A)
End Proc[R]
' 336 $feb0 -$0150 FreeSignal(signalNum)(d0)
Procedure _FREE_SIGNAL[P_SIGNAL_NUM]
 Dreg(0) = P_SIGNAL_NUM
 R=Lib Call(_EXEC_ID, -$150)
End Proc[R]
' 342 $feaa -$0156 AllocTrap(trapNum)(d0)
Procedure _ALLOC_TRAP[P_TRAP_NUM]
 Dreg(0) = P_TRAP_NUM
 R=Lib Call(_EXEC_ID, -$156)
End Proc[R]
' 348 $fea4 -$015c FreeTrap(trapNum)(d0)
Procedure _FREE_TRAP[P_TRAP_NUM]
 Dreg(0) = P_TRAP_NUM
 R=Lib Call(_EXEC_ID, -$15C)
End Proc[R]
' 354 $fe9e -$0162 AddPort(port)(a1)
Procedure _ADD_PORT[P_PORT]
 Areg(1) = P_PORT
 R=Lib Call(_EXEC_ID, -$162)
End Proc[R]
' 360 $fe98 -$0168 RemPort(port)(a1)
Procedure _REM_PORT[P_PORT]
 Areg(1) = P_PORT
 R=Lib Call(_EXEC_ID, -$168)
End Proc[R]
' 366 $fe92 -$016e PutMsg(port,message)(a0/a1)
Procedure _PUT_MSG[P_PORT,P_MESSAGE]
 Areg(0) = P_PORT
 Areg(1) = P_MESSAGE
 R=Lib Call(_EXEC_ID, -$16E)
End Proc[R]
' 372 $fe8c -$0174 GetMsg(port)(a0)
Procedure _GET_MSG[P_PORT]
 Areg(0) = P_PORT
 R=Lib Call(_EXEC_ID, -$174)
End Proc[R]
' 378 $fe86 -$017a ReplyMsg(message)(a1)
Procedure _REPLY_MSG[P_MESSAGE]
 Areg(1) = P_MESSAGE
 R=Lib Call(_EXEC_ID, -$17A)
End Proc[R]
' 384 $fe80 -$0180 WaitPort(port)(a0)
Procedure _WAIT_PORT[P_PORT]
 Areg(0) = P_PORT
 R=Lib Call(_EXEC_ID, -$180)
End Proc[R]
' 390 $fe7a -$0186 FindPort(name)(a1)
Procedure _FIND_PORT[P_NAME]
 Areg(1) = P_NAME
 R=Lib Call(_EXEC_ID, -$186)
End Proc[R]
' 396 $fe74 -$018c AddLibrary(library)(a1)
Procedure _ADD_LIBRARY[P_LIBRARY]
 Areg(1) = P_LIBRARY
 R=Lib Call(_EXEC_ID, -$18C)
End Proc[R]
' 402 $fe6e -$0192 RemLibrary(library)(a1)
Procedure _REM_LIBRARY[P_LIBRARY]
 Areg(1) = P_LIBRARY
 R=Lib Call(_EXEC_ID, -$192)
End Proc[R]
' 408 $fe68 -$0198 OldOpenLibrary(libName)(a1)
Procedure _OLD_OPEN_LIBRARY[P_LIB_NAME]
 Areg(1) = P_LIB_NAME
 R=Lib Call(_EXEC_ID, -$198)
End Proc[R]
' 414 $fe62 -$019e CloseLibrary(library)(a1)
Procedure _CLOSE_LIBRARY[P_LIBRARY]
 Areg(1) = P_LIBRARY
 R=Lib Call(_EXEC_ID, -$19E)
End Proc[R]
' 420 $fe5c -$01a4 SetFunction(library,funcOffset,newFunction)(a1,a0,d0)
Procedure _SET_FUNCTION[P_LIBRARY,P_FUNC_OFFSET,P_NEW_FUNCTION]
 Areg(1) = P_LIBRARY
 Areg(0) = P_FUNC_OFFSET
 Dreg(0) = P_NEW_FUNCTION
 R=Lib Call(_EXEC_ID, -$1A4)
End Proc[R]
' 426 $fe56 -$01aa SumLibrary(library)(a1)
Procedure _SUM_LIBRARY[P_LIBRARY]
 Areg(1) = P_LIBRARY
 R=Lib Call(_EXEC_ID, -$1AA)
End Proc[R]
' 432 $fe50 -$01b0 AddDevice(device)(a1)
Procedure _ADD_DEVICE[P_DEVICE]
 Areg(1) = P_DEVICE
 R=Lib Call(_EXEC_ID, -$1B0)
End Proc[R]
' 438 $fe4a -$01b6 RemDevice(device)(a1)
Procedure _REM_DEVICE[P_DEVICE]
 Areg(1) = P_DEVICE
 R=Lib Call(_EXEC_ID, -$1B6)
End Proc[R]
' 444 $fe44 -$01bc OpenDevice(devName,unit,ioRequest,flags)(a0,d0/a1,d1)
Procedure _OPEN_DEVICE[P_DEV_NAME,P_UNIT,P_IO_REQUEST,P_FLAGS]
 Areg(0) = P_DEV_NAME
 Dreg(0) = P_UNIT
 Areg(1) = P_IO_REQUEST
 Dreg(1) = P_FLAGS
 R=Lib Call(_EXEC_ID, -$1BC)
End Proc[R]
' 450 $fe3e -$01c2 CloseDevice(ioRequest)(a1)
Procedure _CLOSE_DEVICE[P_IO_REQUEST]
 Areg(1) = P_IO_REQUEST
 R=Lib Call(_EXEC_ID, -$1C2)
End Proc[R]
' 456 $fe38 -$01c8 DoIO(ioRequest)(a1)
Procedure _DO_IO[P_IO_REQUEST]
 Areg(1) = P_IO_REQUEST
 R=Lib Call(_EXEC_ID, -$1C8)
End Proc[R]
' 462 $fe32 -$01ce SendIO(ioRequest)(a1)
Procedure _SEND_IO[P_IO_REQUEST]
 Areg(1) = P_IO_REQUEST
 R=Lib Call(_EXEC_ID, -$1CE)
End Proc[R]
' 468 $fe2c -$01d4 CheckIO(ioRequest)(a1)
Procedure _CHECK_IO[P_IO_REQUEST]
 Areg(1) = P_IO_REQUEST
 R=Lib Call(_EXEC_ID, -$1D4)
End Proc[R]
' 474 $fe26 -$01da WaitIO(ioRequest)(a1)
Procedure _WAIT_IO[P_IO_REQUEST]
 Areg(1) = P_IO_REQUEST
 R=Lib Call(_EXEC_ID, -$1DA)
End Proc[R]
' 480 $fe20 -$01e0 AbortIO(ioRequest)(a1)
Procedure _ABORT_IO[P_IO_REQUEST]
 Areg(1) = P_IO_REQUEST
 R=Lib Call(_EXEC_ID, -$1E0)
End Proc[R]
' 486 $fe1a -$01e6 AddResource(resource)(a1)
Procedure _ADD_RESOURCE[P_RESOURCE]
 Areg(1) = P_RESOURCE
 R=Lib Call(_EXEC_ID, -$1E6)
End Proc[R]
' 492 $fe14 -$01ec RemResource(resource)(a1)
Procedure _REM_RESOURCE[P_RESOURCE]
 Areg(1) = P_RESOURCE
 R=Lib Call(_EXEC_ID, -$1EC)
End Proc[R]
' 498 $fe0e -$01f2 OpenResource(resName)(a1)
Procedure _OPEN_RESOURCE[P_RES_NAME]
 Areg(1) = P_RES_NAME
 R=Lib Call(_EXEC_ID, -$1F2)
End Proc[R]
' 522 $fdf6 -$020a RawDoFmt(formatString,dataStream,putChProc,putChData)(a0/a1/a2/a3)
Procedure _RAW_DO_FMT[P_FORMAT_STRING,P_DATA_STREAM,P_PUT_CH_PROC,P_PUT_CH_DATA]
 Areg(0) = P_FORMAT_STRING
 Areg(1) = P_DATA_STREAM
 Areg(2) = P_PUT_CH_PROC
 Areg(3) = P_PUT_CH_DATA
 R=Lib Call(_EXEC_ID, -$20A)
End Proc[R]
' 528 $fdf0 -$0210 GetCC()()
Procedure _GET_CC
 R=Lib Call(_EXEC_ID, -$210)
End Proc[R]
' 534 $fdea -$0216 TypeOfMem(address)(a1)
Procedure _TYPE_OF_MEM[P_ADDRESS]
 Areg(1) = P_ADDRESS
 R=Lib Call(_EXEC_ID, -$216)
End Proc[R]
' 540 $fde4 -$021c Procure(semaport,bidMsg)(a0/a1)
Procedure _PROCURE[P_SEMAPORT,P_BID_MSG]
 Areg(0) = P_SEMAPORT
 Areg(1) = P_BID_MSG
 R=Lib Call(_EXEC_ID, -$21C)
End Proc[R]
' 546 $fdde -$0222 Vacate(semaport)(a0)
Procedure _VACATE[P_SEMAPORT]
 Areg(0) = P_SEMAPORT
 R=Lib Call(_EXEC_ID, -$222)
End Proc[R]
' 552 $fdd8 -$0228 OpenLibrary(libName,version)(a1,d0)
Procedure _OPEN_LIBRARY[P_LIB_NAME,P_VERSION]
 Areg(1) = P_LIB_NAME
 Dreg(0) = P_VERSION
 R=Lib Call(_EXEC_ID, -$228)
End Proc[R]
' 558 $fdd2 -$022e InitSemaphore(sigSem)(a0)
Procedure _INIT_SEMAPHORE[P_SIG_SEM]
 Areg(0) = P_SIG_SEM
 R=Lib Call(_EXEC_ID, -$22E)
End Proc[R]
' 564 $fdcc -$0234 ObtainSemaphore(sigSem)(a0)
Procedure _OBTAIN_SEMAPHORE[P_SIG_SEM]
 Areg(0) = P_SIG_SEM
 R=Lib Call(_EXEC_ID, -$234)
End Proc[R]
' 570 $fdc6 -$023a ReleaseSemaphore(sigSem)(a0)
Procedure _RELEASE_SEMAPHORE[P_SIG_SEM]
 Areg(0) = P_SIG_SEM
 R=Lib Call(_EXEC_ID, -$23A)
End Proc[R]
' 576 $fdc0 -$0240 AttemptSemaphore(sigSem)(a0)
Procedure _ATTEMPT_SEMAPHORE[P_SIG_SEM]
 Areg(0) = P_SIG_SEM
 R=Lib Call(_EXEC_ID, -$240)
End Proc[R]
' 582 $fdba -$0246 ObtainSemaphoreList(sigSem)(a0)
Procedure _OBTAIN_SEMAPHORE_LIST[P_SIG_SEM]
 Areg(0) = P_SIG_SEM
 R=Lib Call(_EXEC_ID, -$246)
End Proc[R]
' 588 $fdb4 -$024c ReleaseSemaphoreList(sigSem)(a0)
Procedure _RELEASE_SEMAPHORE_LIST[P_SIG_SEM]
 Areg(0) = P_SIG_SEM
 R=Lib Call(_EXEC_ID, -$24C)
End Proc[R]
' 594 $fdae -$0252 FindSemaphore(sigSem)(a1)
Procedure _FIND_SEMAPHORE[P_SIG_SEM]
 Areg(1) = P_SIG_SEM
 R=Lib Call(_EXEC_ID, -$252)
End Proc[R]
' 600 $fda8 -$0258 AddSemaphore(sigSem)(a1)
Procedure _ADD_SEMAPHORE[P_SIG_SEM]
 Areg(1) = P_SIG_SEM
 R=Lib Call(_EXEC_ID, -$258)
End Proc[R]
' 606 $fda2 -$025e RemSemaphore(sigSem)(a1)
Procedure _REM_SEMAPHORE[P_SIG_SEM]
 Areg(1) = P_SIG_SEM
 R=Lib Call(_EXEC_ID, -$25E)
End Proc[R]
' 612 $fd9c -$0264 SumKickData()()
Procedure _SUM_KICK_DATA
 R=Lib Call(_EXEC_ID, -$264)
End Proc[R]
' 618 $fd96 -$026a AddMemList(size,attributes,pri,base,name)(d0/d1/d2/a0/a1)
Procedure _ADD_MEM_LIST[P_SIZE,P_ATTRIBUTES,P_PRI,P_BASE,P_NAME]
 Dreg(0) = P_SIZE
 Dreg(1) = P_ATTRIBUTES
 Dreg(2) = P_PRI
 Areg(0) = P_BASE
 Areg(1) = P_NAME
 R=Lib Call(_EXEC_ID, -$26A)
End Proc[R]
' 624 $fd90 -$0270 CopyMem(source,dest,size)(a0/a1,d0)
Procedure _COPY_MEM[P_SOURCE,P_DEST,P_SIZE]
 Areg(0) = P_SOURCE
 Areg(1) = P_DEST
 Dreg(0) = P_SIZE
 R=Lib Call(_EXEC_ID, -$270)
End Proc[R]
' 630 $fd8a -$0276 CopyMemQuick(source,dest,size)(a0/a1,d0)
Procedure _COPY_MEM_QUICK[P_SOURCE,P_DEST,P_SIZE]
 Areg(0) = P_SOURCE
 Areg(1) = P_DEST
 Dreg(0) = P_SIZE
 R=Lib Call(_EXEC_ID, -$276)
End Proc[R]
' 636 $fd84 -$027c CacheClearU()()
Procedure _CACHE_CLEAR_U
 R=Lib Call(_EXEC_ID, -$27C)
End Proc[R]
' 642 $fd7e -$0282 CacheClearE(address,length,caches)(a0,d0/d1)
Procedure _CACHE_CLEAR_E[P_ADDRESS,P_LENGTH,P_CACHES]
 Areg(0) = P_ADDRESS
 Dreg(0) = P_LENGTH
 Dreg(1) = P_CACHES
 R=Lib Call(_EXEC_ID, -$282)
End Proc[R]
' 648 $fd78 -$0288 CacheControl(cacheBits,cacheMask)(d0/d1)
Procedure _CACHE_CONTROL[P_CACHE_BITS,P_CACHE_MASK]
 Dreg(0) = P_CACHE_BITS
 Dreg(1) = P_CACHE_MASK
 R=Lib Call(_EXEC_ID, -$288)
End Proc[R]
' 654 $fd72 -$028e CreateIORequest(port,size)(a0,d0)
Procedure _CREATE_IO_REQUEST[P_PORT,P_SIZE]
 Areg(0) = P_PORT
 Dreg(0) = P_SIZE
 R=Lib Call(_EXEC_ID, -$28E)
End Proc[R]
' 660 $fd6c -$0294 DeleteIORequest(iorequest)(a0)
Procedure _DELETE_IO_REQUEST[P_IOREQUEST]
 Areg(0) = P_IOREQUEST
 R=Lib Call(_EXEC_ID, -$294)
End Proc[R]
' 666 $fd66 -$029a CreateMsgPort()()
Procedure _CREATE_MSG_PORT
 R=Lib Call(_EXEC_ID, -$29A)
End Proc[R]
' 672 $fd60 -$02a0 DeleteMsgPort(port)(a0)
Procedure _DELETE_MSG_PORT[P_PORT]
 Areg(0) = P_PORT
 R=Lib Call(_EXEC_ID, -$2A0)
End Proc[R]
' 678 $fd5a -$02a6 ObtainSemaphoreShared(sigSem)(a0)
Procedure _OBTAIN_SEMAPHORE_SHARED[P_SIG_SEM]
 Areg(0) = P_SIG_SEM
 R=Lib Call(_EXEC_ID, -$2A6)
End Proc[R]
' 684 $fd54 -$02ac AllocVec(byteSize,requirements)(d0/d1)
Procedure _ALLOC_VEC[P_BYTE_SIZE,P_REQUIREMENTS]
 Dreg(0) = P_BYTE_SIZE
 Dreg(1) = P_REQUIREMENTS
 R=Lib Call(_EXEC_ID, -$2AC)
End Proc[R]
' 690 $fd4e -$02b2 FreeVec(memoryBlock)(a1)
Procedure _FREE_VEC[P_MEMORY_BLOCK]
 Areg(1) = P_MEMORY_BLOCK
 R=Lib Call(_EXEC_ID, -$2B2)
End Proc[R]
' 696 $fd48 -$02b8 CreatePrivatePool(requirements,puddleSize,puddleThresh)(d0/d1/d2)
Procedure _CREATE_PRIVATE_POOL[P_REQUIREMENTS,P_PUDDLE_SIZE,P_PUDDLE_THRESH]
 Dreg(0) = P_REQUIREMENTS
 Dreg(1) = P_PUDDLE_SIZE
 Dreg(2) = P_PUDDLE_THRESH
 R=Lib Call(_EXEC_ID, -$2B8)
End Proc[R]
' 702 $fd42 -$02be DeletePrivatePool(poolHeader)(a0)
Procedure _DELETE_PRIVATE_POOL[P_POOL_HEADER]
 Areg(0) = P_POOL_HEADER
 R=Lib Call(_EXEC_ID, -$2BE)
End Proc[R]
' 708 $fd3c -$02c4 AllocPooled(memSize,poolHeader)(d0/a0)
Procedure _ALLOC_POOLED[P_MEM_SIZE,P_POOL_HEADER]
 Dreg(0) = P_MEM_SIZE
 Areg(0) = P_POOL_HEADER
 R=Lib Call(_EXEC_ID, -$2C4)
End Proc[R]
' 714 $fd36 -$02ca FreePooled(memory,poolHeader)(a1,a0)
Procedure _FREE_POOLED[P_MEMORY,P_POOL_HEADER]
 Areg(1) = P_MEMORY
 Areg(0) = P_POOL_HEADER
 R=Lib Call(_EXEC_ID, -$2CA)
End Proc[R]
' 726 $fd2a -$02d6 ColdReboot()()
Procedure _COLD_REBOOT
 R=Lib Call(_EXEC_ID, -$2D6)
End Proc[R]
' 732 $fd24 -$02dc StackSwap(newSize,newSP,newStack)(d0/d1/a0)
Procedure _STACK_SWAP[P_NEW_SIZE,P_NEW_SP,P_NEW_STACK]
 Dreg(0) = P_NEW_SIZE
 Dreg(1) = P_NEW_SP
 Areg(0) = P_NEW_STACK
 R=Lib Call(_EXEC_ID, -$2DC)
End Proc[R]
' 738 $fd1e -$02e2 ChildFree(tid)(d0)
Procedure _CHILD_FREE[P_TID]
 Dreg(0) = P_TID
 R=Lib Call(_EXEC_ID, -$2E2)
End Proc[R]
' 744 $fd18 -$02e8 ChildOrphan(tid)(d0)
Procedure _CHILD_ORPHAN[P_TID]
 Dreg(0) = P_TID
 R=Lib Call(_EXEC_ID, -$2E8)
End Proc[R]
' 750 $fd12 -$02ee ChildStatus(tid)(d0)
Procedure _CHILD_STATUS[P_TID]
 Dreg(0) = P_TID
 R=Lib Call(_EXEC_ID, -$2EE)
End Proc[R]
' 756 $fd0c -$02f4 ChildWait(tid)(d0)
Procedure _CHILD_WAIT[P_TID]
 Dreg(0) = P_TID
 R=Lib Call(_EXEC_ID, -$2F4)
End Proc[R]
