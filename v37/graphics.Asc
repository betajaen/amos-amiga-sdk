' graphics
_GFX_BASE = 0 : _GRAPHICS_ID = 0
Global _GFX_BASE, _GRAPHICS_ID
Procedure LIB_OPEN_GRAPHICS[P_ID]
 Lib Open P_ID, "graphics.library", 0
 _GFX_BASE = Lib Base(P_ID)
 _GRAPHICS_ID = P_ID
End Proc[_GFX_BASE]
Procedure LIB_CLOSE_GRAPHICS
 Lib Close _GRAPHICS_ID
End Proc
'  30 $ffe2 -$001e BltBitMap(srcBitMap,xSrc,ySrc,destBitMap,xDest,yDest,xSize,ySize,minterm,mask,tempA)(a0,d0/d1/a1,d2/d3/d4/d5/d6/d7/a2)
Procedure _BLT_BIT_MAP[P_SRC_BIT_MAP,P_X_SRC,P_Y_SRC,P_DEST_BIT_MAP,P_X_DEST,P_Y_DEST,P_X_SIZE,P_Y_SIZE,P_MINTERM,P_MASK,P_TEMP_A]
 Areg(0) = P_SRC_BIT_MAP
 Dreg(0) = P_X_SRC
 Dreg(1) = P_Y_SRC
 Areg(1) = P_DEST_BIT_MAP
 Dreg(2) = P_X_DEST
 Dreg(3) = P_Y_DEST
 Dreg(4) = P_X_SIZE
 Dreg(5) = P_Y_SIZE
 Dreg(6) = P_MINTERM
 Dreg(7) = P_MASK
 Areg(2) = P_TEMP_A
 R=Lib Call(_GRAPHICS_ID, -$1E)
End Proc[R]
'  36 $ffdc -$0024 BltTemplate(source,xSrc,srcMod,destRP,xDest,yDest,xSize,ySize)(a0,d0/d1/a1,d2/d3/d4/d5)
Procedure _BLT_TEMPLATE[P_SOURCE,P_X_SRC,P_SRC_MOD,P_DEST_RP,P_X_DEST,P_Y_DEST,P_X_SIZE,P_Y_SIZE]
 Areg(0) = P_SOURCE
 Dreg(0) = P_X_SRC
 Dreg(1) = P_SRC_MOD
 Areg(1) = P_DEST_RP
 Dreg(2) = P_X_DEST
 Dreg(3) = P_Y_DEST
 Dreg(4) = P_X_SIZE
 Dreg(5) = P_Y_SIZE
 R=Lib Call(_GRAPHICS_ID, -$24)
End Proc[R]
'  42 $ffd6 -$002a ClearEOL(rp)(a1)
Procedure _CLEAR_EOL[P_RP]
 Areg(1) = P_RP
 R=Lib Call(_GRAPHICS_ID, -$2A)
End Proc[R]
'  48 $ffd0 -$0030 ClearScreen(rp)(a1)
Procedure _CLEAR_SCREEN[P_RP]
 Areg(1) = P_RP
 R=Lib Call(_GRAPHICS_ID, -$30)
End Proc[R]
'  54 $ffca -$0036 TextLength(rp,string,count)(a1,a0,d0)
Procedure _TEXT_LENGTH[P_RP,P_STRING,P_COUNT]
 Areg(1) = P_RP
 Areg(0) = P_STRING
 Dreg(0) = P_COUNT
 R=Lib Call(_GRAPHICS_ID, -$36)
End Proc[R]
'  60 $ffc4 -$003c Text(rp,string,count)(a1,a0,d0)
Procedure _TEXT[P_RP,P_STRING,P_COUNT]
 Areg(1) = P_RP
 Areg(0) = P_STRING
 Dreg(0) = P_COUNT
 R=Lib Call(_GRAPHICS_ID, -$3C)
End Proc[R]
'  66 $ffbe -$0042 SetFont(rp,textFont)(a1,a0)
Procedure _SET_FONT[P_RP,P_TEXT_FONT]
 Areg(1) = P_RP
 Areg(0) = P_TEXT_FONT
 R=Lib Call(_GRAPHICS_ID, -$42)
End Proc[R]
'  72 $ffb8 -$0048 OpenFont(textAttr)(a0)
Procedure _OPEN_FONT[P_TEXT_ATTR]
 Areg(0) = P_TEXT_ATTR
 R=Lib Call(_GRAPHICS_ID, -$48)
End Proc[R]
'  78 $ffb2 -$004e CloseFont(textFont)(a1)
Procedure _CLOSE_FONT[P_TEXT_FONT]
 Areg(1) = P_TEXT_FONT
 R=Lib Call(_GRAPHICS_ID, -$4E)
End Proc[R]
'  84 $ffac -$0054 AskSoftStyle(rp)(a1)
Procedure _ASK_SOFT_STYLE[P_RP]
 Areg(1) = P_RP
 R=Lib Call(_GRAPHICS_ID, -$54)
End Proc[R]
'  90 $ffa6 -$005a SetSoftStyle(rp,style,enable)(a1,d0/d1)
Procedure _SET_SOFT_STYLE[P_RP,P_STYLE,P_ENABLE]
 Areg(1) = P_RP
 Dreg(0) = P_STYLE
 Dreg(1) = P_ENABLE
 R=Lib Call(_GRAPHICS_ID, -$5A)
End Proc[R]
'  96 $ffa0 -$0060 AddBob(bob,rp)(a0/a1)
Procedure _ADD_BOB[P_BOB,P_RP]
 Areg(0) = P_BOB
 Areg(1) = P_RP
 R=Lib Call(_GRAPHICS_ID, -$60)
End Proc[R]
' 102 $ff9a -$0066 AddVSprite(vSprite,rp)(a0/a1)
Procedure _ADD_V_SPRITE[P_V_SPRITE,P_RP]
 Areg(0) = P_V_SPRITE
 Areg(1) = P_RP
 R=Lib Call(_GRAPHICS_ID, -$66)
End Proc[R]
' 108 $ff94 -$006c DoCollision(rp)(a1)
Procedure _DO_COLLISION[P_RP]
 Areg(1) = P_RP
 R=Lib Call(_GRAPHICS_ID, -$6C)
End Proc[R]
' 114 $ff8e -$0072 DrawGList(rp,vp)(a1,a0)
Procedure _DRAW_G_LIST[P_RP,P_VP]
 Areg(1) = P_RP
 Areg(0) = P_VP
 R=Lib Call(_GRAPHICS_ID, -$72)
End Proc[R]
' 120 $ff88 -$0078 InitGels(head,tail,gelsInfo)(a0/a1/a2)
Procedure _INIT_GELS[P_HEAD,P_TAIL,P_GELS_INFO]
 Areg(0) = P_HEAD
 Areg(1) = P_TAIL
 Areg(2) = P_GELS_INFO
 R=Lib Call(_GRAPHICS_ID, -$78)
End Proc[R]
' 126 $ff82 -$007e InitMasks(vSprite)(a0)
Procedure _INIT_MASKS[P_V_SPRITE]
 Areg(0) = P_V_SPRITE
 R=Lib Call(_GRAPHICS_ID, -$7E)
End Proc[R]
' 132 $ff7c -$0084 RemIBob(bob,rp,vp)(a0/a1/a2)
Procedure _REM_I_BOB[P_BOB,P_RP,P_VP]
 Areg(0) = P_BOB
 Areg(1) = P_RP
 Areg(2) = P_VP
 R=Lib Call(_GRAPHICS_ID, -$84)
End Proc[R]
' 138 $ff76 -$008a RemVSprite(vSprite)(a0)
Procedure _REM_V_SPRITE[P_V_SPRITE]
 Areg(0) = P_V_SPRITE
 R=Lib Call(_GRAPHICS_ID, -$8A)
End Proc[R]
' 144 $ff70 -$0090 SetCollision(num,routine,gelsInfo)(d0/a0/a1)
Procedure _SET_COLLISION[P_NUM,P_ROUTINE,P_GELS_INFO]
 Dreg(0) = P_NUM
 Areg(0) = P_ROUTINE
 Areg(1) = P_GELS_INFO
 R=Lib Call(_GRAPHICS_ID, -$90)
End Proc[R]
' 150 $ff6a -$0096 SortGList(rp)(a1)
Procedure _SORT_G_LIST[P_RP]
 Areg(1) = P_RP
 R=Lib Call(_GRAPHICS_ID, -$96)
End Proc[R]
' 156 $ff64 -$009c AddAnimOb(anOb,anKey,rp)(a0/a1/a2)
Procedure _ADD_ANIM_OB[P_AN_OB,P_AN_KEY,P_RP]
 Areg(0) = P_AN_OB
 Areg(1) = P_AN_KEY
 Areg(2) = P_RP
 R=Lib Call(_GRAPHICS_ID, -$9C)
End Proc[R]
' 162 $ff5e -$00a2 Animate(anKey,rp)(a0/a1)
Procedure _ANIMATE[P_AN_KEY,P_RP]
 Areg(0) = P_AN_KEY
 Areg(1) = P_RP
 R=Lib Call(_GRAPHICS_ID, -$A2)
End Proc[R]
' 168 $ff58 -$00a8 GetGBuffers(anOb,rp,flag)(a0/a1,d0)
Procedure _GET_G_BUFFERS[P_AN_OB,P_RP,P_FLAG]
 Areg(0) = P_AN_OB
 Areg(1) = P_RP
 Dreg(0) = P_FLAG
 R=Lib Call(_GRAPHICS_ID, -$A8)
End Proc[R]
' 174 $ff52 -$00ae InitGMasks(anOb)(a0)
Procedure _INIT_G_MASKS[P_AN_OB]
 Areg(0) = P_AN_OB
 R=Lib Call(_GRAPHICS_ID, -$AE)
End Proc[R]
' 180 $ff4c -$00b4 DrawEllipse(rp,xCenter,yCenter,a,b)(a1,d0/d1/d2/d3)
Procedure _DRAW_ELLIPSE[P_RP,P_X_CENTER,P_Y_CENTER,P_A,P_B]
 Areg(1) = P_RP
 Dreg(0) = P_X_CENTER
 Dreg(1) = P_Y_CENTER
 Dreg(2) = P_A
 Dreg(3) = P_B
 R=Lib Call(_GRAPHICS_ID, -$B4)
End Proc[R]
' 186 $ff46 -$00ba AreaEllipse(rp,xCenter,yCenter,a,b)(a1,d0/d1/d2/d3)
Procedure _AREA_ELLIPSE[P_RP,P_X_CENTER,P_Y_CENTER,P_A,P_B]
 Areg(1) = P_RP
 Dreg(0) = P_X_CENTER
 Dreg(1) = P_Y_CENTER
 Dreg(2) = P_A
 Dreg(3) = P_B
 R=Lib Call(_GRAPHICS_ID, -$BA)
End Proc[R]
' 192 $ff40 -$00c0 LoadRGB4(vp,colors,count)(a0/a1,d0)
Procedure _LOAD_RGB4[P_VP,P_COLORS,P_COUNT]
 Areg(0) = P_VP
 Areg(1) = P_COLORS
 Dreg(0) = P_COUNT
 R=Lib Call(_GRAPHICS_ID, -$C0)
End Proc[R]
' 198 $ff3a -$00c6 InitRastPort(rp)(a1)
Procedure _INIT_RAST_PORT[P_RP]
 Areg(1) = P_RP
 R=Lib Call(_GRAPHICS_ID, -$C6)
End Proc[R]
' 204 $ff34 -$00cc InitVPort(vp)(a0)
Procedure _INIT_V_PORT[P_VP]
 Areg(0) = P_VP
 R=Lib Call(_GRAPHICS_ID, -$CC)
End Proc[R]
' 210 $ff2e -$00d2 MrgCop(view)(a1)
Procedure _MRG_COP[P_VIEW]
 Areg(1) = P_VIEW
 R=Lib Call(_GRAPHICS_ID, -$D2)
End Proc[R]
' 216 $ff28 -$00d8 MakeVPort(view,vp)(a0/a1)
Procedure _MAKE_V_PORT[P_VIEW,P_VP]
 Areg(0) = P_VIEW
 Areg(1) = P_VP
 R=Lib Call(_GRAPHICS_ID, -$D8)
End Proc[R]
' 222 $ff22 -$00de LoadView(view)(a1)
Procedure _LOAD_VIEW[P_VIEW]
 Areg(1) = P_VIEW
 R=Lib Call(_GRAPHICS_ID, -$DE)
End Proc[R]
' 228 $ff1c -$00e4 WaitBlit()()
Procedure _WAIT_BLIT
 R=Lib Call(_GRAPHICS_ID, -$E4)
End Proc[R]
' 234 $ff16 -$00ea SetRast(rp,pen)(a1,d0)
Procedure _SET_RAST[P_RP,P_PEN]
 Areg(1) = P_RP
 Dreg(0) = P_PEN
 R=Lib Call(_GRAPHICS_ID, -$EA)
End Proc[R]
' 240 $ff10 -$00f0 Move(rp,x,y)(a1,d0/d1)
Procedure _MOVE[P_RP,P_X,P_Y]
 Areg(1) = P_RP
 Dreg(0) = P_X
 Dreg(1) = P_Y
 R=Lib Call(_GRAPHICS_ID, -$F0)
End Proc[R]
' 246 $ff0a -$00f6 Draw(rp,x,y)(a1,d0/d1)
Procedure _DRAW[P_RP,P_X,P_Y]
 Areg(1) = P_RP
 Dreg(0) = P_X
 Dreg(1) = P_Y
 R=Lib Call(_GRAPHICS_ID, -$F6)
End Proc[R]
' 252 $ff04 -$00fc AreaMove(rp,x,y)(a1,d0/d1)
Procedure _AREA_MOVE[P_RP,P_X,P_Y]
 Areg(1) = P_RP
 Dreg(0) = P_X
 Dreg(1) = P_Y
 R=Lib Call(_GRAPHICS_ID, -$FC)
End Proc[R]
' 258 $fefe -$0102 AreaDraw(rp,x,y)(a1,d0/d1)
Procedure _AREA_DRAW[P_RP,P_X,P_Y]
 Areg(1) = P_RP
 Dreg(0) = P_X
 Dreg(1) = P_Y
 R=Lib Call(_GRAPHICS_ID, -$102)
End Proc[R]
' 264 $fef8 -$0108 AreaEnd(rp)(a1)
Procedure _AREA_END[P_RP]
 Areg(1) = P_RP
 R=Lib Call(_GRAPHICS_ID, -$108)
End Proc[R]
' 270 $fef2 -$010e WaitTOF()()
Procedure _WAIT_TOF
 R=Lib Call(_GRAPHICS_ID, -$10E)
End Proc[R]
' 276 $feec -$0114 QBlit(blit)(a1)
Procedure _Q_BLIT[P_BLIT]
 Areg(1) = P_BLIT
 R=Lib Call(_GRAPHICS_ID, -$114)
End Proc[R]
' 282 $fee6 -$011a InitArea(areaInfo,vectorBuffer,maxVectors)(a0/a1,d0)
Procedure _INIT_AREA[P_AREA_INFO,P_VECTOR_BUFFER,P_MAX_VECTORS]
 Areg(0) = P_AREA_INFO
 Areg(1) = P_VECTOR_BUFFER
 Dreg(0) = P_MAX_VECTORS
 R=Lib Call(_GRAPHICS_ID, -$11A)
End Proc[R]
' 288 $fee0 -$0120 SetRGB4(vp,index,red,green,blue)(a0,d0/d1/d2/d3)
Procedure _SET_RGB4[P_VP,P_INDEX,P_RED,P_GREEN,P_BLUE]
 Areg(0) = P_VP
 Dreg(0) = P_INDEX
 Dreg(1) = P_RED
 Dreg(2) = P_GREEN
 Dreg(3) = P_BLUE
 R=Lib Call(_GRAPHICS_ID, -$120)
End Proc[R]
' 294 $feda -$0126 QBSBlit(blit)(a1)
Procedure _QBS_BLIT[P_BLIT]
 Areg(1) = P_BLIT
 R=Lib Call(_GRAPHICS_ID, -$126)
End Proc[R]
' 300 $fed4 -$012c BltClear(memBlock,byteCount,flags)(a1,d0/d1)
Procedure _BLT_CLEAR[P_MEM_BLOCK,P_BYTE_COUNT,P_FLAGS]
 Areg(1) = P_MEM_BLOCK
 Dreg(0) = P_BYTE_COUNT
 Dreg(1) = P_FLAGS
 R=Lib Call(_GRAPHICS_ID, -$12C)
End Proc[R]
' 306 $fece -$0132 RectFill(rp,xMin,yMin,xMax,yMax)(a1,d0/d1/d2/d3)
Procedure _RECT_FILL[P_RP,P_X_MIN,P_Y_MIN,P_X_MAX,P_Y_MAX]
 Areg(1) = P_RP
 Dreg(0) = P_X_MIN
 Dreg(1) = P_Y_MIN
 Dreg(2) = P_X_MAX
 Dreg(3) = P_Y_MAX
 R=Lib Call(_GRAPHICS_ID, -$132)
End Proc[R]
' 312 $fec8 -$0138 BltPattern(rp,mask,xMin,yMin,xMax,yMax,maskBPR)(a1,a0,d0/d1/d2/d3/d4)
Procedure _BLT_PATTERN[P_RP,P_MASK,P_X_MIN,P_Y_MIN,P_X_MAX,P_Y_MAX,P_MASK_BPR]
 Areg(1) = P_RP
 Areg(0) = P_MASK
 Dreg(0) = P_X_MIN
 Dreg(1) = P_Y_MIN
 Dreg(2) = P_X_MAX
 Dreg(3) = P_Y_MAX
 Dreg(4) = P_MASK_BPR
 R=Lib Call(_GRAPHICS_ID, -$138)
End Proc[R]
' 318 $fec2 -$013e ReadPixel(rp,x,y)(a1,d0/d1)
Procedure _READ_PIXEL[P_RP,P_X,P_Y]
 Areg(1) = P_RP
 Dreg(0) = P_X
 Dreg(1) = P_Y
 R=Lib Call(_GRAPHICS_ID, -$13E)
End Proc[R]
' 324 $febc -$0144 WritePixel(rp,x,y)(a1,d0/d1)
Procedure _WRITE_PIXEL[P_RP,P_X,P_Y]
 Areg(1) = P_RP
 Dreg(0) = P_X
 Dreg(1) = P_Y
 R=Lib Call(_GRAPHICS_ID, -$144)
End Proc[R]
' 330 $feb6 -$014a Flood(rp,mode,x,y)(a1,d2,d0/d1)
Procedure _FLOOD[P_RP,P_MODE,P_X,P_Y]
 Areg(1) = P_RP
 Dreg(2) = P_MODE
 Dreg(0) = P_X
 Dreg(1) = P_Y
 R=Lib Call(_GRAPHICS_ID, -$14A)
End Proc[R]
' 336 $feb0 -$0150 PolyDraw(rp,count,polyTable)(a1,d0/a0)
Procedure _POLY_DRAW[P_RP,P_COUNT,P_POLY_TABLE]
 Areg(1) = P_RP
 Dreg(0) = P_COUNT
 Areg(0) = P_POLY_TABLE
 R=Lib Call(_GRAPHICS_ID, -$150)
End Proc[R]
' 342 $feaa -$0156 SetAPen(rp,pen)(a1,d0)
Procedure _SET_A_PEN[P_RP,P_PEN]
 Areg(1) = P_RP
 Dreg(0) = P_PEN
 R=Lib Call(_GRAPHICS_ID, -$156)
End Proc[R]
' 348 $fea4 -$015c SetBPen(rp,pen)(a1,d0)
Procedure _SET_B_PEN[P_RP,P_PEN]
 Areg(1) = P_RP
 Dreg(0) = P_PEN
 R=Lib Call(_GRAPHICS_ID, -$15C)
End Proc[R]
' 354 $fe9e -$0162 SetDrMd(rp,drawMode)(a1,d0)
Procedure _SET_DR_MD[P_RP,P_DRAW_MODE]
 Areg(1) = P_RP
 Dreg(0) = P_DRAW_MODE
 R=Lib Call(_GRAPHICS_ID, -$162)
End Proc[R]
' 360 $fe98 -$0168 InitView(view)(a1)
Procedure _INIT_VIEW[P_VIEW]
 Areg(1) = P_VIEW
 R=Lib Call(_GRAPHICS_ID, -$168)
End Proc[R]
' 366 $fe92 -$016e CBump(copList)(a1)
Procedure _C_BUMP[P_COP_LIST]
 Areg(1) = P_COP_LIST
 R=Lib Call(_GRAPHICS_ID, -$16E)
End Proc[R]
' 372 $fe8c -$0174 CMove(copList,destination,data)(a1,d0/d1)
Procedure _C_MOVE[P_COP_LIST,P_DESTINATION,P_DATA]
 Areg(1) = P_COP_LIST
 Dreg(0) = P_DESTINATION
 Dreg(1) = P_DATA
 R=Lib Call(_GRAPHICS_ID, -$174)
End Proc[R]
' 378 $fe86 -$017a CWait(copList,v,h)(a1,d0/d1)
Procedure _C_WAIT[P_COP_LIST,P_V,P_H]
 Areg(1) = P_COP_LIST
 Dreg(0) = P_V
 Dreg(1) = P_H
 R=Lib Call(_GRAPHICS_ID, -$17A)
End Proc[R]
' 384 $fe80 -$0180 VBeamPos()()
Procedure _V_BEAM_POS
 R=Lib Call(_GRAPHICS_ID, -$180)
End Proc[R]
' 390 $fe7a -$0186 InitBitMap(bitMap,depth,width,height)(a0,d0/d1/d2)
Procedure _INIT_BIT_MAP[P_BIT_MAP,P_DEPTH,P_WIDTH,P_HEIGHT]
 Areg(0) = P_BIT_MAP
 Dreg(0) = P_DEPTH
 Dreg(1) = P_WIDTH
 Dreg(2) = P_HEIGHT
 R=Lib Call(_GRAPHICS_ID, -$186)
End Proc[R]
' 396 $fe74 -$018c ScrollRaster(rp,dx,dy,xMin,yMin,xMax,yMax)(a1,d0/d1/d2/d3/d4/d5)
Procedure _SCROLL_RASTER[P_RP,P_DX,P_DY,P_X_MIN,P_Y_MIN,P_X_MAX,P_Y_MAX]
 Areg(1) = P_RP
 Dreg(0) = P_DX
 Dreg(1) = P_DY
 Dreg(2) = P_X_MIN
 Dreg(3) = P_Y_MIN
 Dreg(4) = P_X_MAX
 Dreg(5) = P_Y_MAX
 R=Lib Call(_GRAPHICS_ID, -$18C)
End Proc[R]
' 402 $fe6e -$0192 WaitBOVP(vp)(a0)
Procedure _WAIT_BOVP[P_VP]
 Areg(0) = P_VP
 R=Lib Call(_GRAPHICS_ID, -$192)
End Proc[R]
' 408 $fe68 -$0198 GetSprite(sprite,num)(a0,d0)
Procedure _GET_SPRITE[P_SPRITE,P_NUM]
 Areg(0) = P_SPRITE
 Dreg(0) = P_NUM
 R=Lib Call(_GRAPHICS_ID, -$198)
End Proc[R]
' 414 $fe62 -$019e FreeSprite(num)(d0)
Procedure _FREE_SPRITE[P_NUM]
 Dreg(0) = P_NUM
 R=Lib Call(_GRAPHICS_ID, -$19E)
End Proc[R]
' 420 $fe5c -$01a4 ChangeSprite(vp,sprite,newData)(a0/a1/a2)
Procedure _CHANGE_SPRITE[P_VP,P_SPRITE,P_NEW_DATA]
 Areg(0) = P_VP
 Areg(1) = P_SPRITE
 Areg(2) = P_NEW_DATA
 R=Lib Call(_GRAPHICS_ID, -$1A4)
End Proc[R]
' 426 $fe56 -$01aa MoveSprite(vp,sprite,x,y)(a0/a1,d0/d1)
Procedure _MOVE_SPRITE[P_VP,P_SPRITE,P_X,P_Y]
 Areg(0) = P_VP
 Areg(1) = P_SPRITE
 Dreg(0) = P_X
 Dreg(1) = P_Y
 R=Lib Call(_GRAPHICS_ID, -$1AA)
End Proc[R]
' 432 $fe50 -$01b0 LockLayerRom(layer)(a5)
Procedure _LOCK_LAYER_ROM[P_LAYER]
 Areg(5) = P_LAYER
 R=Lib Call(_GRAPHICS_ID, -$1B0)
End Proc[R]
' 438 $fe4a -$01b6 UnlockLayerRom(layer)(a5)
Procedure _UNLOCK_LAYER_ROM[P_LAYER]
 Areg(5) = P_LAYER
 R=Lib Call(_GRAPHICS_ID, -$1B6)
End Proc[R]
' 444 $fe44 -$01bc SyncSBitMap(layer)(a0)
Procedure _SYNC_S_BIT_MAP[P_LAYER]
 Areg(0) = P_LAYER
 R=Lib Call(_GRAPHICS_ID, -$1BC)
End Proc[R]
' 450 $fe3e -$01c2 CopySBitMap(layer)(a0)
Procedure _COPY_S_BIT_MAP[P_LAYER]
 Areg(0) = P_LAYER
 R=Lib Call(_GRAPHICS_ID, -$1C2)
End Proc[R]
' 456 $fe38 -$01c8 OwnBlitter()()
Procedure _OWN_BLITTER
 R=Lib Call(_GRAPHICS_ID, -$1C8)
End Proc[R]
' 462 $fe32 -$01ce DisownBlitter()()
Procedure _DISOWN_BLITTER
 R=Lib Call(_GRAPHICS_ID, -$1CE)
End Proc[R]
' 468 $fe2c -$01d4 InitTmpRas(tmpRas,buffer,size)(a0/a1,d0)
Procedure _INIT_TMP_RAS[P_TMP_RAS,P_BUFFER,P_SIZE]
 Areg(0) = P_TMP_RAS
 Areg(1) = P_BUFFER
 Dreg(0) = P_SIZE
 R=Lib Call(_GRAPHICS_ID, -$1D4)
End Proc[R]
' 474 $fe26 -$01da AskFont(rp,textAttr)(a1,a0)
Procedure _ASK_FONT[P_RP,P_TEXT_ATTR]
 Areg(1) = P_RP
 Areg(0) = P_TEXT_ATTR
 R=Lib Call(_GRAPHICS_ID, -$1DA)
End Proc[R]
' 480 $fe20 -$01e0 AddFont(textFont)(a1)
Procedure _ADD_FONT[P_TEXT_FONT]
 Areg(1) = P_TEXT_FONT
 R=Lib Call(_GRAPHICS_ID, -$1E0)
End Proc[R]
' 486 $fe1a -$01e6 RemFont(textFont)(a1)
Procedure _REM_FONT[P_TEXT_FONT]
 Areg(1) = P_TEXT_FONT
 R=Lib Call(_GRAPHICS_ID, -$1E6)
End Proc[R]
' 492 $fe14 -$01ec AllocRaster(width,height)(d0/d1)
Procedure _ALLOC_RASTER[P_WIDTH,P_HEIGHT]
 Dreg(0) = P_WIDTH
 Dreg(1) = P_HEIGHT
 R=Lib Call(_GRAPHICS_ID, -$1EC)
End Proc[R]
' 498 $fe0e -$01f2 FreeRaster(p,width,height)(a0,d0/d1)
Procedure _FREE_RASTER[P_P,P_WIDTH,P_HEIGHT]
 Areg(0) = P_P
 Dreg(0) = P_WIDTH
 Dreg(1) = P_HEIGHT
 R=Lib Call(_GRAPHICS_ID, -$1F2)
End Proc[R]
' 504 $fe08 -$01f8 AndRectRegion(region,rectangle)(a0/a1)
Procedure _AND_RECT_REGION[P_REGION,P_RECTANGLE]
 Areg(0) = P_REGION
 Areg(1) = P_RECTANGLE
 R=Lib Call(_GRAPHICS_ID, -$1F8)
End Proc[R]
' 510 $fe02 -$01fe OrRectRegion(region,rectangle)(a0/a1)
Procedure _OR_RECT_REGION[P_REGION,P_RECTANGLE]
 Areg(0) = P_REGION
 Areg(1) = P_RECTANGLE
 R=Lib Call(_GRAPHICS_ID, -$1FE)
End Proc[R]
' 516 $fdfc -$0204 NewRegion()()
Procedure _NEW_REGION
 R=Lib Call(_GRAPHICS_ID, -$204)
End Proc[R]
' 522 $fdf6 -$020a ClearRectRegion(region,rectangle)(a0/a1)
Procedure _CLEAR_RECT_REGION[P_REGION,P_RECTANGLE]
 Areg(0) = P_REGION
 Areg(1) = P_RECTANGLE
 R=Lib Call(_GRAPHICS_ID, -$20A)
End Proc[R]
' 528 $fdf0 -$0210 ClearRegion(region)(a0)
Procedure _CLEAR_REGION[P_REGION]
 Areg(0) = P_REGION
 R=Lib Call(_GRAPHICS_ID, -$210)
End Proc[R]
' 534 $fdea -$0216 DisposeRegion(region)(a0)
Procedure _DISPOSE_REGION[P_REGION]
 Areg(0) = P_REGION
 R=Lib Call(_GRAPHICS_ID, -$216)
End Proc[R]
' 540 $fde4 -$021c FreeVPortCopLists(vp)(a0)
Procedure _FREE_V_PORT_COP_LISTS[P_VP]
 Areg(0) = P_VP
 R=Lib Call(_GRAPHICS_ID, -$21C)
End Proc[R]
' 546 $fdde -$0222 FreeCopList(copList)(a0)
Procedure _FREE_COP_LIST[P_COP_LIST]
 Areg(0) = P_COP_LIST
 R=Lib Call(_GRAPHICS_ID, -$222)
End Proc[R]
' 552 $fdd8 -$0228 ClipBlit(srcRP,xSrc,ySrc,destRP,xDest,yDest,xSize,ySize,minterm)(a0,d0/d1/a1,d2/d3/d4/d5/d6)
Procedure _CLIP_BLIT[P_SRC_RP,P_X_SRC,P_Y_SRC,P_DEST_RP,P_X_DEST,P_Y_DEST,P_X_SIZE,P_Y_SIZE,P_MINTERM]
 Areg(0) = P_SRC_RP
 Dreg(0) = P_X_SRC
 Dreg(1) = P_Y_SRC
 Areg(1) = P_DEST_RP
 Dreg(2) = P_X_DEST
 Dreg(3) = P_Y_DEST
 Dreg(4) = P_X_SIZE
 Dreg(5) = P_Y_SIZE
 Dreg(6) = P_MINTERM
 R=Lib Call(_GRAPHICS_ID, -$228)
End Proc[R]
' 558 $fdd2 -$022e XorRectRegion(region,rectangle)(a0/a1)
Procedure _XOR_RECT_REGION[P_REGION,P_RECTANGLE]
 Areg(0) = P_REGION
 Areg(1) = P_RECTANGLE
 R=Lib Call(_GRAPHICS_ID, -$22E)
End Proc[R]
' 564 $fdcc -$0234 FreeCprList(cprList)(a0)
Procedure _FREE_CPR_LIST[P_CPR_LIST]
 Areg(0) = P_CPR_LIST
 R=Lib Call(_GRAPHICS_ID, -$234)
End Proc[R]
' 570 $fdc6 -$023a GetColorMap(entries)(d0)
Procedure _GET_COLOR_MAP[P_ENTRIES]
 Dreg(0) = P_ENTRIES
 R=Lib Call(_GRAPHICS_ID, -$23A)
End Proc[R]
' 576 $fdc0 -$0240 FreeColorMap(colorMap)(a0)
Procedure _FREE_COLOR_MAP[P_COLOR_MAP]
 Areg(0) = P_COLOR_MAP
 R=Lib Call(_GRAPHICS_ID, -$240)
End Proc[R]
' 582 $fdba -$0246 GetRGB4(colorMap,entry)(a0,d0)
Procedure _GET_RGB4[P_COLOR_MAP,P_ENTRY]
 Areg(0) = P_COLOR_MAP
 Dreg(0) = P_ENTRY
 R=Lib Call(_GRAPHICS_ID, -$246)
End Proc[R]
' 588 $fdb4 -$024c ScrollVPort(vp)(a0)
Procedure _SCROLL_V_PORT[P_VP]
 Areg(0) = P_VP
 R=Lib Call(_GRAPHICS_ID, -$24C)
End Proc[R]
' 594 $fdae -$0252 UCopperListInit(uCopList,n)(a0,d0)
Procedure _U_COPPER_LIST_INIT[P_U_COP_LIST,P_N]
 Areg(0) = P_U_COP_LIST
 Dreg(0) = P_N
 R=Lib Call(_GRAPHICS_ID, -$252)
End Proc[R]
' 600 $fda8 -$0258 FreeGBuffers(anOb,rp,flag)(a0/a1,d0)
Procedure _FREE_G_BUFFERS[P_AN_OB,P_RP,P_FLAG]
 Areg(0) = P_AN_OB
 Areg(1) = P_RP
 Dreg(0) = P_FLAG
 R=Lib Call(_GRAPHICS_ID, -$258)
End Proc[R]
' 606 $fda2 -$025e BltBitMapRastPort(srcBitMap,xSrc,ySrc,destRP,xDest,yDest,xSize,ySize,minterm)(a0,d0/d1/a1,d2/d3/d4/d5/d6)
Procedure _BLT_BIT_MAP_RAST_PORT[P_SRC_BIT_MAP,P_X_SRC,P_Y_SRC,P_DEST_RP,P_X_DEST,P_Y_DEST,P_X_SIZE,P_Y_SIZE,P_MINTERM]
 Areg(0) = P_SRC_BIT_MAP
 Dreg(0) = P_X_SRC
 Dreg(1) = P_Y_SRC
 Areg(1) = P_DEST_RP
 Dreg(2) = P_X_DEST
 Dreg(3) = P_Y_DEST
 Dreg(4) = P_X_SIZE
 Dreg(5) = P_Y_SIZE
 Dreg(6) = P_MINTERM
 R=Lib Call(_GRAPHICS_ID, -$25E)
End Proc[R]
' 612 $fd9c -$0264 OrRegionRegion(srcRegion,destRegion)(a0/a1)
Procedure _OR_REGION_REGION[P_SRC_REGION,P_DEST_REGION]
 Areg(0) = P_SRC_REGION
 Areg(1) = P_DEST_REGION
 R=Lib Call(_GRAPHICS_ID, -$264)
End Proc[R]
' 618 $fd96 -$026a XorRegionRegion(srcRegion,destRegion)(a0/a1)
Procedure _XOR_REGION_REGION[P_SRC_REGION,P_DEST_REGION]
 Areg(0) = P_SRC_REGION
 Areg(1) = P_DEST_REGION
 R=Lib Call(_GRAPHICS_ID, -$26A)
End Proc[R]
' 624 $fd90 -$0270 AndRegionRegion(srcRegion,destRegion)(a0/a1)
Procedure _AND_REGION_REGION[P_SRC_REGION,P_DEST_REGION]
 Areg(0) = P_SRC_REGION
 Areg(1) = P_DEST_REGION
 R=Lib Call(_GRAPHICS_ID, -$270)
End Proc[R]
' 630 $fd8a -$0276 SetRGB4CM(colorMap,index,red,green,blue)(a0,d0/d1/d2/d3)
Procedure _SET_RGB4_CM[P_COLOR_MAP,P_INDEX,P_RED,P_GREEN,P_BLUE]
 Areg(0) = P_COLOR_MAP
 Dreg(0) = P_INDEX
 Dreg(1) = P_RED
 Dreg(2) = P_GREEN
 Dreg(3) = P_BLUE
 R=Lib Call(_GRAPHICS_ID, -$276)
End Proc[R]
' 636 $fd84 -$027c BltMaskBitMapRastPort(srcBitMap,xSrc,ySrc,destRP,xDest,yDest,xSize,ySize,minterm,bltMask)(a0,d0/d1/a1,d2/d3/d4/d5/d6/a2)
Procedure _BLT_MASK_BIT_MAP_RAST_PORT[P_SRC_BIT_MAP,P_X_SRC,P_Y_SRC,P_DEST_RP,P_X_DEST,P_Y_DEST,P_X_SIZE,P_Y_SIZE,P_MINTERM,P_BLT_MASK]
 Areg(0) = P_SRC_BIT_MAP
 Dreg(0) = P_X_SRC
 Dreg(1) = P_Y_SRC
 Areg(1) = P_DEST_RP
 Dreg(2) = P_X_DEST
 Dreg(3) = P_Y_DEST
 Dreg(4) = P_X_SIZE
 Dreg(5) = P_Y_SIZE
 Dreg(6) = P_MINTERM
 Areg(2) = P_BLT_MASK
 R=Lib Call(_GRAPHICS_ID, -$27C)
End Proc[R]
' 654 $fd72 -$028e AttemptLockLayerRom(layer)(a5)
Procedure _ATTEMPT_LOCK_LAYER_ROM[P_LAYER]
 Areg(5) = P_LAYER
 R=Lib Call(_GRAPHICS_ID, -$28E)
End Proc[R]
' 660 $fd6c -$0294 GfxNew(gfxNodeType)(d0)
Procedure _GFX_NEW[P_GFX_NODE_TYPE]
 Dreg(0) = P_GFX_NODE_TYPE
 R=Lib Call(_GRAPHICS_ID, -$294)
End Proc[R]
' 666 $fd66 -$029a GfxFree(gfxNodePtr)(a0)
Procedure _GFX_FREE[P_GFX_NODE_PTR]
 Areg(0) = P_GFX_NODE_PTR
 R=Lib Call(_GRAPHICS_ID, -$29A)
End Proc[R]
' 672 $fd60 -$02a0 GfxAssociate(associateNode,gfxNodePtr)(a0/a1)
Procedure _GFX_ASSOCIATE[P_ASSOCIATE_NODE,P_GFX_NODE_PTR]
 Areg(0) = P_ASSOCIATE_NODE
 Areg(1) = P_GFX_NODE_PTR
 R=Lib Call(_GRAPHICS_ID, -$2A0)
End Proc[R]
' 678 $fd5a -$02a6 BitMapScale(bitScaleArgs)(a0)
Procedure _BIT_MAP_SCALE[P_BIT_SCALE_ARGS]
 Areg(0) = P_BIT_SCALE_ARGS
 R=Lib Call(_GRAPHICS_ID, -$2A6)
End Proc[R]
' 684 $fd54 -$02ac ScalerDiv(factor,numerator,denominator)(d0/d1/d2)
Procedure _SCALER_DIV[P_FACTOR,P_NUMERATOR,P_DENOMINATOR]
 Dreg(0) = P_FACTOR
 Dreg(1) = P_NUMERATOR
 Dreg(2) = P_DENOMINATOR
 R=Lib Call(_GRAPHICS_ID, -$2AC)
End Proc[R]
' 690 $fd4e -$02b2 TextExtent(rp,string,count,textExtent)(a1,a0,d0/a2)
Procedure _TEXT_EXTENT[P_RP,P_STRING,P_COUNT,P_TEXT_EXTENT]
 Areg(1) = P_RP
 Areg(0) = P_STRING
 Dreg(0) = P_COUNT
 Areg(2) = P_TEXT_EXTENT
 R=Lib Call(_GRAPHICS_ID, -$2B2)
End Proc[R]
' 696 $fd48 -$02b8 TextFit(rp,string,strLen,textExtent,constrainingExtent,strDirection,constrainingBitWidth,constrainingBitHeight)(a1,a0,d0/a2/a3,d1/d2/d3)
Procedure _TEXT_FIT[P_RP,P_STRING,P_STR_LEN,P_TEXT_EXTENT,P_CONSTRAINING_EXTENT,P_STR_DIRECTION,P_CONSTRAINING_BIT_WIDTH,P_CONSTRAINING_BIT_HEIGHT]
 Areg(1) = P_RP
 Areg(0) = P_STRING
 Dreg(0) = P_STR_LEN
 Areg(2) = P_TEXT_EXTENT
 Areg(3) = P_CONSTRAINING_EXTENT
 Dreg(1) = P_STR_DIRECTION
 Dreg(2) = P_CONSTRAINING_BIT_WIDTH
 Dreg(3) = P_CONSTRAINING_BIT_HEIGHT
 R=Lib Call(_GRAPHICS_ID, -$2B8)
End Proc[R]
' 702 $fd42 -$02be GfxLookUp(associateNode)(a0)
Procedure _GFX_LOOK_UP[P_ASSOCIATE_NODE]
 Areg(0) = P_ASSOCIATE_NODE
 R=Lib Call(_GRAPHICS_ID, -$2BE)
End Proc[R]
' 708 $fd3c -$02c4 VideoControl(colorMap,tagarray)(a0/a1)
Procedure _VIDEO_CONTROL[P_COLOR_MAP,P_TAGARRAY]
 Areg(0) = P_COLOR_MAP
 Areg(1) = P_TAGARRAY
 R=Lib Call(_GRAPHICS_ID, -$2C4)
End Proc[R]
' 714 $fd36 -$02ca OpenMonitor(monitorName,displayID)(a1,d0)
Procedure _OPEN_MONITOR[P_MONITOR_NAME,P_DISPLAY_ID]
 Areg(1) = P_MONITOR_NAME
 Dreg(0) = P_DISPLAY_ID
 R=Lib Call(_GRAPHICS_ID, -$2CA)
End Proc[R]
' 720 $fd30 -$02d0 CloseMonitor(monitorSpec)(a0)
Procedure _CLOSE_MONITOR[P_MONITOR_SPEC]
 Areg(0) = P_MONITOR_SPEC
 R=Lib Call(_GRAPHICS_ID, -$2D0)
End Proc[R]
' 726 $fd2a -$02d6 FindDisplayInfo(displayID)(d0)
Procedure _FIND_DISPLAY_INFO[P_DISPLAY_ID]
 Dreg(0) = P_DISPLAY_ID
 R=Lib Call(_GRAPHICS_ID, -$2D6)
End Proc[R]
' 732 $fd24 -$02dc NextDisplayInfo(displayID)(d0)
Procedure _NEXT_DISPLAY_INFO[P_DISPLAY_ID]
 Dreg(0) = P_DISPLAY_ID
 R=Lib Call(_GRAPHICS_ID, -$2DC)
End Proc[R]
' 756 $fd0c -$02f4 GetDisplayInfoData(handle,buf,size,tagID,displayID)(a0/a1,d0/d1/d2)
Procedure _GET_DISPLAY_INFO_DATA[P_HANDLE,P_BUF,P_SIZE,P_TAG_ID,P_DISPLAY_ID]
 Areg(0) = P_HANDLE
 Areg(1) = P_BUF
 Dreg(0) = P_SIZE
 Dreg(1) = P_TAG_ID
 Dreg(2) = P_DISPLAY_ID
 R=Lib Call(_GRAPHICS_ID, -$2F4)
End Proc[R]
' 762 $fd06 -$02fa FontExtent(font,fontExtent)(a0/a1)
Procedure _FONT_EXTENT[P_FONT,P_FONT_EXTENT]
 Areg(0) = P_FONT
 Areg(1) = P_FONT_EXTENT
 R=Lib Call(_GRAPHICS_ID, -$2FA)
End Proc[R]
' 768 $fd00 -$0300 ReadPixelLine8(rp,xstart,ystart,width,array,tempRP)(a0,d0/d1/d2/a2,a1)
Procedure _READ_PIXEL_LINE8[P_RP,P_XSTART,P_YSTART,P_WIDTH,P_ARRAY,P_TEMP_RP]
 Areg(0) = P_RP
 Dreg(0) = P_XSTART
 Dreg(1) = P_YSTART
 Dreg(2) = P_WIDTH
 Areg(2) = P_ARRAY
 Areg(1) = P_TEMP_RP
 R=Lib Call(_GRAPHICS_ID, -$300)
End Proc[R]
' 774 $fcfa -$0306 WritePixelLine8(rp,xstart,ystart,width,array,tempRP)(a0,d0/d1/d2/a2,a1)
Procedure _WRITE_PIXEL_LINE8[P_RP,P_XSTART,P_YSTART,P_WIDTH,P_ARRAY,P_TEMP_RP]
 Areg(0) = P_RP
 Dreg(0) = P_XSTART
 Dreg(1) = P_YSTART
 Dreg(2) = P_WIDTH
 Areg(2) = P_ARRAY
 Areg(1) = P_TEMP_RP
 R=Lib Call(_GRAPHICS_ID, -$306)
End Proc[R]
' 780 $fcf4 -$030c ReadPixelArray8(rp,xstart,ystart,xstop,ystop,array,temprp)(a0,d0/d1/d2/d3/a2,a1)
Procedure _READ_PIXEL_ARRAY8[P_RP,P_XSTART,P_YSTART,P_XSTOP,P_YSTOP,P_ARRAY,P_TEMPRP]
 Areg(0) = P_RP
 Dreg(0) = P_XSTART
 Dreg(1) = P_YSTART
 Dreg(2) = P_XSTOP
 Dreg(3) = P_YSTOP
 Areg(2) = P_ARRAY
 Areg(1) = P_TEMPRP
 R=Lib Call(_GRAPHICS_ID, -$30C)
End Proc[R]
' 786 $fcee -$0312 WritePixelArray8(rp,xstart,ystart,xstop,ystop,array,temprp)(a0,d0/d1/d2/d3/a2,a1)
Procedure _WRITE_PIXEL_ARRAY8[P_RP,P_XSTART,P_YSTART,P_XSTOP,P_YSTOP,P_ARRAY,P_TEMPRP]
 Areg(0) = P_RP
 Dreg(0) = P_XSTART
 Dreg(1) = P_YSTART
 Dreg(2) = P_XSTOP
 Dreg(3) = P_YSTOP
 Areg(2) = P_ARRAY
 Areg(1) = P_TEMPRP
 R=Lib Call(_GRAPHICS_ID, -$312)
End Proc[R]
' 792 $fce8 -$0318 GetVPModeID(vp)(a0)
Procedure _GET_VP_MODE_ID[P_VP]
 Areg(0) = P_VP
 R=Lib Call(_GRAPHICS_ID, -$318)
End Proc[R]
' 798 $fce2 -$031e ModeNotAvailable(modeID)(d0)
Procedure _MODE_NOT_AVAILABLE[P_MODE_ID]
 Dreg(0) = P_MODE_ID
 R=Lib Call(_GRAPHICS_ID, -$31E)
End Proc[R]
' 804 $fcdc -$0324 WeighTAMatch(reqTextAttr,targetTextAttr,targetTags)(a0/a1/a2)
Procedure _WEIGH_TA_MATCH[P_REQ_TEXT_ATTR,P_TARGET_TEXT_ATTR,P_TARGET_TAGS]
 Areg(0) = P_REQ_TEXT_ATTR
 Areg(1) = P_TARGET_TEXT_ATTR
 Areg(2) = P_TARGET_TAGS
 R=Lib Call(_GRAPHICS_ID, -$324)
End Proc[R]
' 810 $fcd6 -$032a EraseRect(rp,xMin,yMin,xMax,yMax)(a1,d0/d1/d2/d3)
Procedure _ERASE_RECT[P_RP,P_X_MIN,P_Y_MIN,P_X_MAX,P_Y_MAX]
 Areg(1) = P_RP
 Dreg(0) = P_X_MIN
 Dreg(1) = P_Y_MIN
 Dreg(2) = P_X_MAX
 Dreg(3) = P_Y_MAX
 R=Lib Call(_GRAPHICS_ID, -$32A)
End Proc[R]
' 816 $fcd0 -$0330 ExtendFont(font,fontTags)(a0/a1)
Procedure _EXTEND_FONT[P_FONT,P_FONT_TAGS]
 Areg(0) = P_FONT
 Areg(1) = P_FONT_TAGS
 R=Lib Call(_GRAPHICS_ID, -$330)
End Proc[R]
' 822 $fcca -$0336 StripFont(font)(a0)
Procedure _STRIP_FONT[P_FONT]
 Areg(0) = P_FONT
 R=Lib Call(_GRAPHICS_ID, -$336)
End Proc[R]
