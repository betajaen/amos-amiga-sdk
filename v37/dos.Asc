' dos
_DOS_BASE = 0 : _DOS_ID = 0
Global _DOS_BASE, _DOS_ID
Procedure LIB_OPEN_DOS[P_ID]
 Lib Open P_ID, "dos.library", 0
 _DOS_BASE = Lib Base(P_ID)
 _DOS_ID = P_ID
End Proc[_DOS_BASE]
Procedure LIB_CLOSE_DOS
 Lib Close _DOS_ID
End Proc
'  30 $ffe2 -$001e Open(name,accessMode)(d1/d2)
Procedure _OPEN[P_NAME,P_ACCESS_MODE]
 Dreg(1) = P_NAME
 Dreg(2) = P_ACCESS_MODE
 R=Lib Call(_DOS_ID, -$1E)
End Proc[R]
'  36 $ffdc -$0024 Close(file)(d1)
Procedure _CLOSE[P_FILE]
 Dreg(1) = P_FILE
 R=Lib Call(_DOS_ID, -$24)
End Proc[R]
'  42 $ffd6 -$002a Read(file,buffer,length)(d1/d2/d3)
Procedure _READ[P_FILE,P_BUFFER,P_LENGTH]
 Dreg(1) = P_FILE
 Dreg(2) = P_BUFFER
 Dreg(3) = P_LENGTH
 R=Lib Call(_DOS_ID, -$2A)
End Proc[R]
'  48 $ffd0 -$0030 Write(file,buffer,length)(d1/d2/d3)
Procedure _WRITE[P_FILE,P_BUFFER,P_LENGTH]
 Dreg(1) = P_FILE
 Dreg(2) = P_BUFFER
 Dreg(3) = P_LENGTH
 R=Lib Call(_DOS_ID, -$30)
End Proc[R]
'  54 $ffca -$0036 Input()()
Procedure _INPUT
 R=Lib Call(_DOS_ID, -$36)
End Proc[R]
'  60 $ffc4 -$003c Output()()
Procedure _OUTPUT
 R=Lib Call(_DOS_ID, -$3C)
End Proc[R]
'  66 $ffbe -$0042 Seek(file,position,offset)(d1/d2/d3)
Procedure _SEEK[P_FILE,P_POSITION,P_OFFSET]
 Dreg(1) = P_FILE
 Dreg(2) = P_POSITION
 Dreg(3) = P_OFFSET
 R=Lib Call(_DOS_ID, -$42)
End Proc[R]
'  72 $ffb8 -$0048 DeleteFile(name)(d1)
Procedure _DELETE_FILE[P_NAME]
 Dreg(1) = P_NAME
 R=Lib Call(_DOS_ID, -$48)
End Proc[R]
'  78 $ffb2 -$004e Rename(oldName,newName)(d1/d2)
Procedure _RENAME[P_OLD_NAME,P_NEW_NAME]
 Dreg(1) = P_OLD_NAME
 Dreg(2) = P_NEW_NAME
 R=Lib Call(_DOS_ID, -$4E)
End Proc[R]
'  84 $ffac -$0054 Lock(name,type)(d1/d2)
Procedure _LOCK[P_NAME,P_TYPE]
 Dreg(1) = P_NAME
 Dreg(2) = P_TYPE
 R=Lib Call(_DOS_ID, -$54)
End Proc[R]
'  90 $ffa6 -$005a UnLock(lock)(d1)
Procedure _UN_LOCK[P_LOCK]
 Dreg(1) = P_LOCK
 R=Lib Call(_DOS_ID, -$5A)
End Proc[R]
'  96 $ffa0 -$0060 DupLock(lock)(d1)
Procedure _DUP_LOCK[P_LOCK]
 Dreg(1) = P_LOCK
 R=Lib Call(_DOS_ID, -$60)
End Proc[R]
' 102 $ff9a -$0066 Examine(lock,fileInfoBlock)(d1/d2)
Procedure _EXAMINE[P_LOCK,P_FILE_INFO_BLOCK]
 Dreg(1) = P_LOCK
 Dreg(2) = P_FILE_INFO_BLOCK
 R=Lib Call(_DOS_ID, -$66)
End Proc[R]
' 108 $ff94 -$006c ExNext(lock,fileInfoBlock)(d1/d2)
Procedure _EX_NEXT[P_LOCK,P_FILE_INFO_BLOCK]
 Dreg(1) = P_LOCK
 Dreg(2) = P_FILE_INFO_BLOCK
 R=Lib Call(_DOS_ID, -$6C)
End Proc[R]
' 114 $ff8e -$0072 Info(lock,parameterBlock)(d1/d2)
Procedure _INFO[P_LOCK,P_PARAMETER_BLOCK]
 Dreg(1) = P_LOCK
 Dreg(2) = P_PARAMETER_BLOCK
 R=Lib Call(_DOS_ID, -$72)
End Proc[R]
' 120 $ff88 -$0078 CreateDir(name)(d1)
Procedure _CREATE_DIR[P_NAME]
 Dreg(1) = P_NAME
 R=Lib Call(_DOS_ID, -$78)
End Proc[R]
' 126 $ff82 -$007e CurrentDir(lock)(d1)
Procedure _CURRENT_DIR[P_LOCK]
 Dreg(1) = P_LOCK
 R=Lib Call(_DOS_ID, -$7E)
End Proc[R]
' 132 $ff7c -$0084 IoErr()()
Procedure _IO_ERR
 R=Lib Call(_DOS_ID, -$84)
End Proc[R]
' 138 $ff76 -$008a CreateProc(name,pri,segList,stackSize)(d1/d2/d3/d4)
Procedure _CREATE_PROC[P_NAME,P_PRI,P_SEG_LIST,P_STACK_SIZE]
 Dreg(1) = P_NAME
 Dreg(2) = P_PRI
 Dreg(3) = P_SEG_LIST
 Dreg(4) = P_STACK_SIZE
 R=Lib Call(_DOS_ID, -$8A)
End Proc[R]
' 144 $ff70 -$0090 Exit(returnCode)(d1)
Procedure _EXIT[P_RETURN_CODE]
 Dreg(1) = P_RETURN_CODE
 R=Lib Call(_DOS_ID, -$90)
End Proc[R]
' 150 $ff6a -$0096 LoadSeg(name)(d1)
Procedure _LOAD_SEG[P_NAME]
 Dreg(1) = P_NAME
 R=Lib Call(_DOS_ID, -$96)
End Proc[R]
' 156 $ff64 -$009c UnLoadSeg(seglist)(d1)
Procedure _UN_LOAD_SEG[P_SEGLIST]
 Dreg(1) = P_SEGLIST
 R=Lib Call(_DOS_ID, -$9C)
End Proc[R]
' 174 $ff52 -$00ae DeviceProc(name)(d1)
Procedure _DEVICE_PROC[P_NAME]
 Dreg(1) = P_NAME
 R=Lib Call(_DOS_ID, -$AE)
End Proc[R]
' 180 $ff4c -$00b4 SetComment(name,comment)(d1/d2)
Procedure _SET_COMMENT[P_NAME,P_COMMENT]
 Dreg(1) = P_NAME
 Dreg(2) = P_COMMENT
 R=Lib Call(_DOS_ID, -$B4)
End Proc[R]
' 186 $ff46 -$00ba SetProtection(name,protect)(d1/d2)
Procedure _SET_PROTECTION[P_NAME,P_PROTECT]
 Dreg(1) = P_NAME
 Dreg(2) = P_PROTECT
 R=Lib Call(_DOS_ID, -$BA)
End Proc[R]
' 192 $ff40 -$00c0 DateStamp(date)(d1)
Procedure _DATE_STAMP[P_DATE]
 Dreg(1) = P_DATE
 R=Lib Call(_DOS_ID, -$C0)
End Proc[R]
' 198 $ff3a -$00c6 Delay(timeout)(d1)
Procedure _DELAY[P_TIMEOUT]
 Dreg(1) = P_TIMEOUT
 R=Lib Call(_DOS_ID, -$C6)
End Proc[R]
' 204 $ff34 -$00cc WaitForChar(file,timeout)(d1/d2)
Procedure _WAIT_FOR_CHAR[P_FILE,P_TIMEOUT]
 Dreg(1) = P_FILE
 Dreg(2) = P_TIMEOUT
 R=Lib Call(_DOS_ID, -$CC)
End Proc[R]
' 210 $ff2e -$00d2 ParentDir(lock)(d1)
Procedure _PARENT_DIR[P_LOCK]
 Dreg(1) = P_LOCK
 R=Lib Call(_DOS_ID, -$D2)
End Proc[R]
' 216 $ff28 -$00d8 IsInteractive(file)(d1)
Procedure _IS_INTERACTIVE[P_FILE]
 Dreg(1) = P_FILE
 R=Lib Call(_DOS_ID, -$D8)
End Proc[R]
' 222 $ff22 -$00de Execute(string,file,file2)(d1/d2/d3)
Procedure _EXECUTE[P_STRING,P_FILE,P_FILE2]
 Dreg(1) = P_STRING
 Dreg(2) = P_FILE
 Dreg(3) = P_FILE2
 R=Lib Call(_DOS_ID, -$DE)
End Proc[R]
' 228 $ff1c -$00e4 AllocDosObject(type,tags)(d1/d2)
Procedure _ALLOC_DOS_OBJECT[P_TYPE,P_TAGS]
 Dreg(1) = P_TYPE
 Dreg(2) = P_TAGS
 R=Lib Call(_DOS_ID, -$E4)
End Proc[R]
' 234 $ff16 -$00ea FreeDosObject(type,ptr)(d1/d2)
Procedure _FREE_DOS_OBJECT[P_TYPE,P_PTR]
 Dreg(1) = P_TYPE
 Dreg(2) = P_PTR
 R=Lib Call(_DOS_ID, -$EA)
End Proc[R]
' 240 $ff10 -$00f0 DoPkt(port,action,arg1,arg2,arg3,arg4,arg5)(d1/d2/d3/d4/d5/d6/d7)
Procedure _DO_PKT[P_PORT,P_ACTION,P_ARG1,P_ARG2,P_ARG3,P_ARG4,P_ARG5]
 Dreg(1) = P_PORT
 Dreg(2) = P_ACTION
 Dreg(3) = P_ARG1
 Dreg(4) = P_ARG2
 Dreg(5) = P_ARG3
 Dreg(6) = P_ARG4
 Dreg(7) = P_ARG5
 R=Lib Call(_DOS_ID, -$F0)
End Proc[R]
' 246 $ff0a -$00f6 SendPkt(dp,port,replyport)(d1/d2/d3)
Procedure _SEND_PKT[P_DP,P_PORT,P_REPLYPORT]
 Dreg(1) = P_DP
 Dreg(2) = P_PORT
 Dreg(3) = P_REPLYPORT
 R=Lib Call(_DOS_ID, -$F6)
End Proc[R]
' 252 $ff04 -$00fc WaitPkt()()
Procedure _WAIT_PKT
 R=Lib Call(_DOS_ID, -$FC)
End Proc[R]
' 258 $fefe -$0102 ReplyPkt(dp,res1,res2)(d1/d2/d3)
Procedure _REPLY_PKT[P_DP,P_RES1,P_RES2]
 Dreg(1) = P_DP
 Dreg(2) = P_RES1
 Dreg(3) = P_RES2
 R=Lib Call(_DOS_ID, -$102)
End Proc[R]
' 264 $fef8 -$0108 AbortPkt(port,pkt)(d1/d2)
Procedure _ABORT_PKT[P_PORT,P_PKT]
 Dreg(1) = P_PORT
 Dreg(2) = P_PKT
 R=Lib Call(_DOS_ID, -$108)
End Proc[R]
' 270 $fef2 -$010e LockRecord(fh,offset,length,mode,timeout)(d1/d2/d3/d4/d5)
Procedure _LOCK_RECORD[P_FH,P_OFFSET,P_LENGTH,P_MODE,P_TIMEOUT]
 Dreg(1) = P_FH
 Dreg(2) = P_OFFSET
 Dreg(3) = P_LENGTH
 Dreg(4) = P_MODE
 Dreg(5) = P_TIMEOUT
 R=Lib Call(_DOS_ID, -$10E)
End Proc[R]
' 276 $feec -$0114 LockRecords(recArray,timeout)(d1/d2)
Procedure _LOCK_RECORDS[P_REC_ARRAY,P_TIMEOUT]
 Dreg(1) = P_REC_ARRAY
 Dreg(2) = P_TIMEOUT
 R=Lib Call(_DOS_ID, -$114)
End Proc[R]
' 282 $fee6 -$011a UnLockRecord(fh,offset,length)(d1/d2/d3)
Procedure _UN_LOCK_RECORD[P_FH,P_OFFSET,P_LENGTH]
 Dreg(1) = P_FH
 Dreg(2) = P_OFFSET
 Dreg(3) = P_LENGTH
 R=Lib Call(_DOS_ID, -$11A)
End Proc[R]
' 288 $fee0 -$0120 UnLockRecords(recArray)(d1)
Procedure _UN_LOCK_RECORDS[P_REC_ARRAY]
 Dreg(1) = P_REC_ARRAY
 R=Lib Call(_DOS_ID, -$120)
End Proc[R]
' 294 $feda -$0126 SelectInput(fh)(d1)
Procedure _SELECT_INPUT[P_FH]
 Dreg(1) = P_FH
 R=Lib Call(_DOS_ID, -$126)
End Proc[R]
' 300 $fed4 -$012c SelectOutput(fh)(d1)
Procedure _SELECT_OUTPUT[P_FH]
 Dreg(1) = P_FH
 R=Lib Call(_DOS_ID, -$12C)
End Proc[R]
' 306 $fece -$0132 FGetC(fh)(d1)
Procedure _F_GET_C[P_FH]
 Dreg(1) = P_FH
 R=Lib Call(_DOS_ID, -$132)
End Proc[R]
' 312 $fec8 -$0138 FPutC(fh,ch)(d1/d2)
Procedure _F_PUT_C[P_FH,P_CH]
 Dreg(1) = P_FH
 Dreg(2) = P_CH
 R=Lib Call(_DOS_ID, -$138)
End Proc[R]
' 318 $fec2 -$013e UnGetC(fh,character)(d1/d2)
Procedure _UN_GET_C[P_FH,P_CHARACTER]
 Dreg(1) = P_FH
 Dreg(2) = P_CHARACTER
 R=Lib Call(_DOS_ID, -$13E)
End Proc[R]
' 324 $febc -$0144 FRead(fh,block,blocklen,number)(d1/d2/d3/d4)
Procedure _F_READ[P_FH,P_BLOCK,P_BLOCKLEN,P_NUMBER]
 Dreg(1) = P_FH
 Dreg(2) = P_BLOCK
 Dreg(3) = P_BLOCKLEN
 Dreg(4) = P_NUMBER
 R=Lib Call(_DOS_ID, -$144)
End Proc[R]
' 330 $feb6 -$014a FWrite(fh,block,blocklen,number)(d1/d2/d3/d4)
Procedure _F_WRITE[P_FH,P_BLOCK,P_BLOCKLEN,P_NUMBER]
 Dreg(1) = P_FH
 Dreg(2) = P_BLOCK
 Dreg(3) = P_BLOCKLEN
 Dreg(4) = P_NUMBER
 R=Lib Call(_DOS_ID, -$14A)
End Proc[R]
' 336 $feb0 -$0150 FGets(fh,buf,buflen)(d1/d2/d3)
Procedure _F_GETS[P_FH,P_BUF,P_BUFLEN]
 Dreg(1) = P_FH
 Dreg(2) = P_BUF
 Dreg(3) = P_BUFLEN
 R=Lib Call(_DOS_ID, -$150)
End Proc[R]
' 342 $feaa -$0156 FPuts(fh,str)(d1/d2)
Procedure _F_PUTS[P_FH,P_STR]
 Dreg(1) = P_FH
 Dreg(2) = P_STR
 R=Lib Call(_DOS_ID, -$156)
End Proc[R]
' 348 $fea4 -$015c VFWritef(fh,format,argarray)(d1/d2/d3)
Procedure _VF_WRITEF[P_FH,P_FORMAT,P_ARGARRAY]
 Dreg(1) = P_FH
 Dreg(2) = P_FORMAT
 Dreg(3) = P_ARGARRAY
 R=Lib Call(_DOS_ID, -$15C)
End Proc[R]
' 354 $fe9e -$0162 VFPrintf(fh,format,argarray)(d1/d2/d3)
Procedure _VF_PRINTF[P_FH,P_FORMAT,P_ARGARRAY]
 Dreg(1) = P_FH
 Dreg(2) = P_FORMAT
 Dreg(3) = P_ARGARRAY
 R=Lib Call(_DOS_ID, -$162)
End Proc[R]
' 360 $fe98 -$0168 Flush(fh)(d1)
Procedure _FLUSH[P_FH]
 Dreg(1) = P_FH
 R=Lib Call(_DOS_ID, -$168)
End Proc[R]
' 366 $fe92 -$016e SetVBuf(fh,buff,type,size)(d1/d2/d3/d4)
Procedure _SET_V_BUF[P_FH,P_BUFF,P_TYPE,P_SIZE]
 Dreg(1) = P_FH
 Dreg(2) = P_BUFF
 Dreg(3) = P_TYPE
 Dreg(4) = P_SIZE
 R=Lib Call(_DOS_ID, -$16E)
End Proc[R]
' 372 $fe8c -$0174 DupLockFromFH(fh)(d1)
Procedure _DUP_LOCK_FROM_FH[P_FH]
 Dreg(1) = P_FH
 R=Lib Call(_DOS_ID, -$174)
End Proc[R]
' 378 $fe86 -$017a OpenFromLock(lock)(d1)
Procedure _OPEN_FROM_LOCK[P_LOCK]
 Dreg(1) = P_LOCK
 R=Lib Call(_DOS_ID, -$17A)
End Proc[R]
' 384 $fe80 -$0180 ParentOfFH(fh)(d1)
Procedure _PARENT_OF_FH[P_FH]
 Dreg(1) = P_FH
 R=Lib Call(_DOS_ID, -$180)
End Proc[R]
' 390 $fe7a -$0186 ExamineFH(fh,fib)(d1/d2)
Procedure _EXAMINE_FH[P_FH,P_FIB]
 Dreg(1) = P_FH
 Dreg(2) = P_FIB
 R=Lib Call(_DOS_ID, -$186)
End Proc[R]
' 396 $fe74 -$018c SetFileDate(name,date)(d1/d2)
Procedure _SET_FILE_DATE[P_NAME,P_DATE]
 Dreg(1) = P_NAME
 Dreg(2) = P_DATE
 R=Lib Call(_DOS_ID, -$18C)
End Proc[R]
' 402 $fe6e -$0192 NameFromLock(lock,buffer,len)(d1/d2/d3)
Procedure _NAME_FROM_LOCK[P_LOCK,P_BUFFER,P_LEN]
 Dreg(1) = P_LOCK
 Dreg(2) = P_BUFFER
 Dreg(3) = P_LEN
 R=Lib Call(_DOS_ID, -$192)
End Proc[R]
' 408 $fe68 -$0198 NameFromFH(fh,buffer,len)(d1/d2/d3)
Procedure _NAME_FROM_FH[P_FH,P_BUFFER,P_LEN]
 Dreg(1) = P_FH
 Dreg(2) = P_BUFFER
 Dreg(3) = P_LEN
 R=Lib Call(_DOS_ID, -$198)
End Proc[R]
' 414 $fe62 -$019e SplitName(name,seperator,buf,oldpos,size)(d1/d2/d3/d4/d5)
Procedure _SPLIT_NAME[P_NAME,P_SEPERATOR,P_BUF,P_OLDPOS,P_SIZE]
 Dreg(1) = P_NAME
 Dreg(2) = P_SEPERATOR
 Dreg(3) = P_BUF
 Dreg(4) = P_OLDPOS
 Dreg(5) = P_SIZE
 R=Lib Call(_DOS_ID, -$19E)
End Proc[R]
' 420 $fe5c -$01a4 SameLock(lock1,lock2)(d1/d2)
Procedure _SAME_LOCK[P_LOCK1,P_LOCK2]
 Dreg(1) = P_LOCK1
 Dreg(2) = P_LOCK2
 R=Lib Call(_DOS_ID, -$1A4)
End Proc[R]
' 426 $fe56 -$01aa SetMode(fh,mode)(d1/d2)
Procedure _SET_MODE[P_FH,P_MODE]
 Dreg(1) = P_FH
 Dreg(2) = P_MODE
 R=Lib Call(_DOS_ID, -$1AA)
End Proc[R]
' 432 $fe50 -$01b0 ExAll(lock,buffer,size,data,control)(d1/d2/d3/d4/d5)
Procedure _EX_ALL[P_LOCK,P_BUFFER,P_SIZE,P_DATA,P_CONTROL]
 Dreg(1) = P_LOCK
 Dreg(2) = P_BUFFER
 Dreg(3) = P_SIZE
 Dreg(4) = P_DATA
 Dreg(5) = P_CONTROL
 R=Lib Call(_DOS_ID, -$1B0)
End Proc[R]
' 438 $fe4a -$01b6 ReadLink(port,lock,path,buffer,size)(d1/d2/d3/d4/d5)
Procedure _READ_LINK[P_PORT,P_LOCK,P_PATH,P_BUFFER,P_SIZE]
 Dreg(1) = P_PORT
 Dreg(2) = P_LOCK
 Dreg(3) = P_PATH
 Dreg(4) = P_BUFFER
 Dreg(5) = P_SIZE
 R=Lib Call(_DOS_ID, -$1B6)
End Proc[R]
' 444 $fe44 -$01bc MakeLink(name,dest,soft)(d1/d2/d3)
Procedure _MAKE_LINK[P_NAME,P_DEST,P_SOFT]
 Dreg(1) = P_NAME
 Dreg(2) = P_DEST
 Dreg(3) = P_SOFT
 R=Lib Call(_DOS_ID, -$1BC)
End Proc[R]
' 450 $fe3e -$01c2 ChangeMode(type,fh,newmode)(d1/d2/d3)
Procedure _CHANGE_MODE[P_TYPE,P_FH,P_NEWMODE]
 Dreg(1) = P_TYPE
 Dreg(2) = P_FH
 Dreg(3) = P_NEWMODE
 R=Lib Call(_DOS_ID, -$1C2)
End Proc[R]
' 456 $fe38 -$01c8 SetFileSize(fh,pos,mode)(d1/d2/d3)
Procedure _SET_FILE_SIZE[P_FH,P_POS,P_MODE]
 Dreg(1) = P_FH
 Dreg(2) = P_POS
 Dreg(3) = P_MODE
 R=Lib Call(_DOS_ID, -$1C8)
End Proc[R]
' 462 $fe32 -$01ce SetIoErr(result)(d1)
Procedure _SET_IO_ERR[P_RESULT]
 Dreg(1) = P_RESULT
 R=Lib Call(_DOS_ID, -$1CE)
End Proc[R]
' 468 $fe2c -$01d4 Fault(code,header,buffer,len)(d1/d2/d3/d4)
Procedure _FAULT[P_CODE,P_HEADER,P_BUFFER,P_LEN]
 Dreg(1) = P_CODE
 Dreg(2) = P_HEADER
 Dreg(3) = P_BUFFER
 Dreg(4) = P_LEN
 R=Lib Call(_DOS_ID, -$1D4)
End Proc[R]
' 474 $fe26 -$01da PrintFault(code,header)(d1/d2)
Procedure _PRINT_FAULT[P_CODE,P_HEADER]
 Dreg(1) = P_CODE
 Dreg(2) = P_HEADER
 R=Lib Call(_DOS_ID, -$1DA)
End Proc[R]
' 480 $fe20 -$01e0 ErrorReport(code,type,arg1,device)(d1/d2/d3/d4)
Procedure _ERROR_REPORT[P_CODE,P_TYPE,P_ARG1,P_DEVICE]
 Dreg(1) = P_CODE
 Dreg(2) = P_TYPE
 Dreg(3) = P_ARG1
 Dreg(4) = P_DEVICE
 R=Lib Call(_DOS_ID, -$1E0)
End Proc[R]
' 492 $fe14 -$01ec Cli()()
Procedure _CLI
 R=Lib Call(_DOS_ID, -$1EC)
End Proc[R]
' 498 $fe0e -$01f2 CreateNewProc(tags)(d1)
Procedure _CREATE_NEW_PROC[P_TAGS]
 Dreg(1) = P_TAGS
 R=Lib Call(_DOS_ID, -$1F2)
End Proc[R]
' 504 $fe08 -$01f8 RunCommand(seg,stack,paramptr,paramlen)(d1/d2/d3/d4)
Procedure _RUN_COMMAND[P_SEG,P_STACK,P_PARAMPTR,P_PARAMLEN]
 Dreg(1) = P_SEG
 Dreg(2) = P_STACK
 Dreg(3) = P_PARAMPTR
 Dreg(4) = P_PARAMLEN
 R=Lib Call(_DOS_ID, -$1F8)
End Proc[R]
' 510 $fe02 -$01fe GetConsoleTask()()
Procedure _GET_CONSOLE_TASK
 R=Lib Call(_DOS_ID, -$1FE)
End Proc[R]
' 516 $fdfc -$0204 SetConsoleTask(task)(d1)
Procedure _SET_CONSOLE_TASK[P_TASK]
 Dreg(1) = P_TASK
 R=Lib Call(_DOS_ID, -$204)
End Proc[R]
' 522 $fdf6 -$020a GetFileSysTask()()
Procedure _GET_FILE_SYS_TASK
 R=Lib Call(_DOS_ID, -$20A)
End Proc[R]
' 528 $fdf0 -$0210 SetFileSysTask(task)(d1)
Procedure _SET_FILE_SYS_TASK[P_TASK]
 Dreg(1) = P_TASK
 R=Lib Call(_DOS_ID, -$210)
End Proc[R]
' 534 $fdea -$0216 GetArgStr()()
Procedure _GET_ARG_STR
 R=Lib Call(_DOS_ID, -$216)
End Proc[R]
' 540 $fde4 -$021c SetArgStr(string)(d1)
Procedure _SET_ARG_STR[P_STRING]
 Dreg(1) = P_STRING
 R=Lib Call(_DOS_ID, -$21C)
End Proc[R]
' 546 $fdde -$0222 FindCliProc(num)(d1)
Procedure _FIND_CLI_PROC[P_NUM]
 Dreg(1) = P_NUM
 R=Lib Call(_DOS_ID, -$222)
End Proc[R]
' 552 $fdd8 -$0228 MaxCli()()
Procedure _MAX_CLI
 R=Lib Call(_DOS_ID, -$228)
End Proc[R]
' 558 $fdd2 -$022e SetCurrentDirName(name)(d1)
Procedure _SET_CURRENT_DIR_NAME[P_NAME]
 Dreg(1) = P_NAME
 R=Lib Call(_DOS_ID, -$22E)
End Proc[R]
' 564 $fdcc -$0234 GetCurrentDirName(buf,len)(d1/d2)
Procedure _GET_CURRENT_DIR_NAME[P_BUF,P_LEN]
 Dreg(1) = P_BUF
 Dreg(2) = P_LEN
 R=Lib Call(_DOS_ID, -$234)
End Proc[R]
' 570 $fdc6 -$023a SetProgramName(name)(d1)
Procedure _SET_PROGRAM_NAME[P_NAME]
 Dreg(1) = P_NAME
 R=Lib Call(_DOS_ID, -$23A)
End Proc[R]
' 576 $fdc0 -$0240 GetProgramName(buf,len)(d1/d2)
Procedure _GET_PROGRAM_NAME[P_BUF,P_LEN]
 Dreg(1) = P_BUF
 Dreg(2) = P_LEN
 R=Lib Call(_DOS_ID, -$240)
End Proc[R]
' 582 $fdba -$0246 SetPrompt(name)(d1)
Procedure _SET_PROMPT[P_NAME]
 Dreg(1) = P_NAME
 R=Lib Call(_DOS_ID, -$246)
End Proc[R]
' 588 $fdb4 -$024c GetPrompt(buf,len)(d1/d2)
Procedure _GET_PROMPT[P_BUF,P_LEN]
 Dreg(1) = P_BUF
 Dreg(2) = P_LEN
 R=Lib Call(_DOS_ID, -$24C)
End Proc[R]
' 594 $fdae -$0252 SetProgramDir(lock)(d1)
Procedure _SET_PROGRAM_DIR[P_LOCK]
 Dreg(1) = P_LOCK
 R=Lib Call(_DOS_ID, -$252)
End Proc[R]
' 600 $fda8 -$0258 GetProgramDir()()
Procedure _GET_PROGRAM_DIR
 R=Lib Call(_DOS_ID, -$258)
End Proc[R]
' 606 $fda2 -$025e SystemTagList(command,tags)(d1/d2)
Procedure _SYSTEM_TAG_LIST[P_COMMAND,P_TAGS]
 Dreg(1) = P_COMMAND
 Dreg(2) = P_TAGS
 R=Lib Call(_DOS_ID, -$25E)
End Proc[R]
' 612 $fd9c -$0264 AssignLock(name,lock)(d1/d2)
Procedure _ASSIGN_LOCK[P_NAME,P_LOCK]
 Dreg(1) = P_NAME
 Dreg(2) = P_LOCK
 R=Lib Call(_DOS_ID, -$264)
End Proc[R]
' 618 $fd96 -$026a AssignLate(name,path)(d1/d2)
Procedure _ASSIGN_LATE[P_NAME,P_PATH]
 Dreg(1) = P_NAME
 Dreg(2) = P_PATH
 R=Lib Call(_DOS_ID, -$26A)
End Proc[R]
' 624 $fd90 -$0270 AssignPath(name,path)(d1/d2)
Procedure _ASSIGN_PATH[P_NAME,P_PATH]
 Dreg(1) = P_NAME
 Dreg(2) = P_PATH
 R=Lib Call(_DOS_ID, -$270)
End Proc[R]
' 630 $fd8a -$0276 AssignAdd(name,lock)(d1/d2)
Procedure _ASSIGN_ADD[P_NAME,P_LOCK]
 Dreg(1) = P_NAME
 Dreg(2) = P_LOCK
 R=Lib Call(_DOS_ID, -$276)
End Proc[R]
' 636 $fd84 -$027c RemAssignList(name,lock)(d1/d2)
Procedure _REM_ASSIGN_LIST[P_NAME,P_LOCK]
 Dreg(1) = P_NAME
 Dreg(2) = P_LOCK
 R=Lib Call(_DOS_ID, -$27C)
End Proc[R]
' 642 $fd7e -$0282 GetDeviceProc(name,dp)(d1/d2)
Procedure _GET_DEVICE_PROC[P_NAME,P_DP]
 Dreg(1) = P_NAME
 Dreg(2) = P_DP
 R=Lib Call(_DOS_ID, -$282)
End Proc[R]
' 648 $fd78 -$0288 FreeDeviceProc(dp)(d1)
Procedure _FREE_DEVICE_PROC[P_DP]
 Dreg(1) = P_DP
 R=Lib Call(_DOS_ID, -$288)
End Proc[R]
' 654 $fd72 -$028e LockDosList(flags)(d1)
Procedure _LOCK_DOS_LIST[P_FLAGS]
 Dreg(1) = P_FLAGS
 R=Lib Call(_DOS_ID, -$28E)
End Proc[R]
' 660 $fd6c -$0294 UnLockDosList(flags)(d1)
Procedure _UN_LOCK_DOS_LIST[P_FLAGS]
 Dreg(1) = P_FLAGS
 R=Lib Call(_DOS_ID, -$294)
End Proc[R]
' 666 $fd66 -$029a AttemptLockDosList(flags)(d1)
Procedure _ATTEMPT_LOCK_DOS_LIST[P_FLAGS]
 Dreg(1) = P_FLAGS
 R=Lib Call(_DOS_ID, -$29A)
End Proc[R]
' 672 $fd60 -$02a0 RemDosEntry(dlist)(d1)
Procedure _REM_DOS_ENTRY[P_DLIST]
 Dreg(1) = P_DLIST
 R=Lib Call(_DOS_ID, -$2A0)
End Proc[R]
' 678 $fd5a -$02a6 AddDosEntry(dlist)(d1)
Procedure _ADD_DOS_ENTRY[P_DLIST]
 Dreg(1) = P_DLIST
 R=Lib Call(_DOS_ID, -$2A6)
End Proc[R]
' 684 $fd54 -$02ac FindDosEntry(dlist,name,flags)(d1/d2/d3)
Procedure _FIND_DOS_ENTRY[P_DLIST,P_NAME,P_FLAGS]
 Dreg(1) = P_DLIST
 Dreg(2) = P_NAME
 Dreg(3) = P_FLAGS
 R=Lib Call(_DOS_ID, -$2AC)
End Proc[R]
' 690 $fd4e -$02b2 NextDosEntry(dlist,flags)(d1/d2)
Procedure _NEXT_DOS_ENTRY[P_DLIST,P_FLAGS]
 Dreg(1) = P_DLIST
 Dreg(2) = P_FLAGS
 R=Lib Call(_DOS_ID, -$2B2)
End Proc[R]
' 696 $fd48 -$02b8 MakeDosEntry(name,type)(d1/d2)
Procedure _MAKE_DOS_ENTRY[P_NAME,P_TYPE]
 Dreg(1) = P_NAME
 Dreg(2) = P_TYPE
 R=Lib Call(_DOS_ID, -$2B8)
End Proc[R]
' 702 $fd42 -$02be FreeDosEntry(dlist)(d1)
Procedure _FREE_DOS_ENTRY[P_DLIST]
 Dreg(1) = P_DLIST
 R=Lib Call(_DOS_ID, -$2BE)
End Proc[R]
' 708 $fd3c -$02c4 IsFileSystem(name)(d1)
Procedure _IS_FILE_SYSTEM[P_NAME]
 Dreg(1) = P_NAME
 R=Lib Call(_DOS_ID, -$2C4)
End Proc[R]
' 714 $fd36 -$02ca Format(filesystem,volumename,dostype)(d1/d2/d3)
Procedure _FORMAT[P_FILESYSTEM,P_VOLUMENAME,P_DOSTYPE]
 Dreg(1) = P_FILESYSTEM
 Dreg(2) = P_VOLUMENAME
 Dreg(3) = P_DOSTYPE
 R=Lib Call(_DOS_ID, -$2CA)
End Proc[R]
' 720 $fd30 -$02d0 Relabel(drive,newname)(d1/d2)
Procedure _RELABEL[P_DRIVE,P_NEWNAME]
 Dreg(1) = P_DRIVE
 Dreg(2) = P_NEWNAME
 R=Lib Call(_DOS_ID, -$2D0)
End Proc[R]
' 726 $fd2a -$02d6 Inhibit(name,onoff)(d1/d2)
Procedure _INHIBIT[P_NAME,P_ONOFF]
 Dreg(1) = P_NAME
 Dreg(2) = P_ONOFF
 R=Lib Call(_DOS_ID, -$2D6)
End Proc[R]
' 732 $fd24 -$02dc AddBuffers(name,number)(d1/d2)
Procedure _ADD_BUFFERS[P_NAME,P_NUMBER]
 Dreg(1) = P_NAME
 Dreg(2) = P_NUMBER
 R=Lib Call(_DOS_ID, -$2DC)
End Proc[R]
' 738 $fd1e -$02e2 CompareDates(date1,date2)(d1/d2)
Procedure _COMPARE_DATES[P_DATE1,P_DATE2]
 Dreg(1) = P_DATE1
 Dreg(2) = P_DATE2
 R=Lib Call(_DOS_ID, -$2E2)
End Proc[R]
' 744 $fd18 -$02e8 DateToStr(datetime)(d1)
Procedure _DATE_TO_STR[P_DATETIME]
 Dreg(1) = P_DATETIME
 R=Lib Call(_DOS_ID, -$2E8)
End Proc[R]
' 750 $fd12 -$02ee StrToDate(datetime)(d1)
Procedure _STR_TO_DATE[P_DATETIME]
 Dreg(1) = P_DATETIME
 R=Lib Call(_DOS_ID, -$2EE)
End Proc[R]
' 756 $fd0c -$02f4 InternalLoadSeg(fh,table,funcarray,stack)(d0/a0/a1/a2)
Procedure _INTERNAL_LOAD_SEG[P_FH,P_TABLE,P_FUNCARRAY,P_STACK]
 Dreg(0) = P_FH
 Areg(0) = P_TABLE
 Areg(1) = P_FUNCARRAY
 Areg(2) = P_STACK
 R=Lib Call(_DOS_ID, -$2F4)
End Proc[R]
' 762 $fd06 -$02fa InternalUnLoadSeg(seglist,freefunc)(d1/a1)
Procedure _INTERNAL_UN_LOAD_SEG[P_SEGLIST,P_FREEFUNC]
 Dreg(1) = P_SEGLIST
 Areg(1) = P_FREEFUNC
 R=Lib Call(_DOS_ID, -$2FA)
End Proc[R]
' 768 $fd00 -$0300 NewLoadSeg(file,tags)(d1/d2)
Procedure _NEW_LOAD_SEG[P_FILE,P_TAGS]
 Dreg(1) = P_FILE
 Dreg(2) = P_TAGS
 R=Lib Call(_DOS_ID, -$300)
End Proc[R]
' 774 $fcfa -$0306 AddSegment(name,seg,system)(d1/d2/d3)
Procedure _ADD_SEGMENT[P_NAME,P_SEG,P_SYSTEM]
 Dreg(1) = P_NAME
 Dreg(2) = P_SEG
 Dreg(3) = P_SYSTEM
 R=Lib Call(_DOS_ID, -$306)
End Proc[R]
' 780 $fcf4 -$030c FindSegment(name,seg,system)(d1/d2/d3)
Procedure _FIND_SEGMENT[P_NAME,P_SEG,P_SYSTEM]
 Dreg(1) = P_NAME
 Dreg(2) = P_SEG
 Dreg(3) = P_SYSTEM
 R=Lib Call(_DOS_ID, -$30C)
End Proc[R]
' 786 $fcee -$0312 RemSegment(seg)(d1)
Procedure _REM_SEGMENT[P_SEG]
 Dreg(1) = P_SEG
 R=Lib Call(_DOS_ID, -$312)
End Proc[R]
' 792 $fce8 -$0318 CheckSignal(mask)(d1)
Procedure _CHECK_SIGNAL[P_MASK]
 Dreg(1) = P_MASK
 R=Lib Call(_DOS_ID, -$318)
End Proc[R]
' 798 $fce2 -$031e ReadArgs(template,array,args)(d1/d2/d3)
Procedure _READ_ARGS[P_TEMPLATE,P_ARRAY,P_ARGS]
 Dreg(1) = P_TEMPLATE
 Dreg(2) = P_ARRAY
 Dreg(3) = P_ARGS
 R=Lib Call(_DOS_ID, -$31E)
End Proc[R]
' 804 $fcdc -$0324 FindArg(keyword,template)(d1/d2)
Procedure _FIND_ARG[P_KEYWORD,P_TEMPLATE]
 Dreg(1) = P_KEYWORD
 Dreg(2) = P_TEMPLATE
 R=Lib Call(_DOS_ID, -$324)
End Proc[R]
' 810 $fcd6 -$032a ReadItem(name,maxchars,cSource)(d1/d2/d3)
Procedure _READ_ITEM[P_NAME,P_MAXCHARS,P_C_SOURCE]
 Dreg(1) = P_NAME
 Dreg(2) = P_MAXCHARS
 Dreg(3) = P_C_SOURCE
 R=Lib Call(_DOS_ID, -$32A)
End Proc[R]
' 816 $fcd0 -$0330 StrToLong(string,value)(d1/d2)
Procedure _STR_TO_LONG[P_STRING,P_VALUE]
 Dreg(1) = P_STRING
 Dreg(2) = P_VALUE
 R=Lib Call(_DOS_ID, -$330)
End Proc[R]
' 822 $fcca -$0336 MatchFirst(pat,anchor)(d1/d2)
Procedure _MATCH_FIRST[P_PAT,P_ANCHOR]
 Dreg(1) = P_PAT
 Dreg(2) = P_ANCHOR
 R=Lib Call(_DOS_ID, -$336)
End Proc[R]
' 828 $fcc4 -$033c MatchNext(anchor)(d1)
Procedure _MATCH_NEXT[P_ANCHOR]
 Dreg(1) = P_ANCHOR
 R=Lib Call(_DOS_ID, -$33C)
End Proc[R]
' 834 $fcbe -$0342 MatchEnd(anchor)(d1)
Procedure _MATCH_END[P_ANCHOR]
 Dreg(1) = P_ANCHOR
 R=Lib Call(_DOS_ID, -$342)
End Proc[R]
' 840 $fcb8 -$0348 ParsePattern(pat,buf,buflen)(d1/d2/d3)
Procedure _PARSE_PATTERN[P_PAT,P_BUF,P_BUFLEN]
 Dreg(1) = P_PAT
 Dreg(2) = P_BUF
 Dreg(3) = P_BUFLEN
 R=Lib Call(_DOS_ID, -$348)
End Proc[R]
' 846 $fcb2 -$034e MatchPattern(pat,str)(d1/d2)
Procedure _MATCH_PATTERN[P_PAT,P_STR]
 Dreg(1) = P_PAT
 Dreg(2) = P_STR
 R=Lib Call(_DOS_ID, -$34E)
End Proc[R]
' 858 $fca6 -$035a FreeArgs(args)(d1)
Procedure _FREE_ARGS[P_ARGS]
 Dreg(1) = P_ARGS
 R=Lib Call(_DOS_ID, -$35A)
End Proc[R]
' 870 $fc9a -$0366 FilePart(path)(d1)
Procedure _FILE_PART[P_PATH]
 Dreg(1) = P_PATH
 R=Lib Call(_DOS_ID, -$366)
End Proc[R]
' 876 $fc94 -$036c PathPart(path)(d1)
Procedure _PATH_PART[P_PATH]
 Dreg(1) = P_PATH
 R=Lib Call(_DOS_ID, -$36C)
End Proc[R]
' 882 $fc8e -$0372 AddPart(dirname,filename,size)(d1/d2/d3)
Procedure _ADD_PART[P_DIRNAME,P_FILENAME,P_SIZE]
 Dreg(1) = P_DIRNAME
 Dreg(2) = P_FILENAME
 Dreg(3) = P_SIZE
 R=Lib Call(_DOS_ID, -$372)
End Proc[R]
' 888 $fc88 -$0378 StartNotify(notify)(d1)
Procedure _START_NOTIFY[P_NOTIFY]
 Dreg(1) = P_NOTIFY
 R=Lib Call(_DOS_ID, -$378)
End Proc[R]
' 894 $fc82 -$037e EndNotify(notify)(d1)
Procedure _END_NOTIFY[P_NOTIFY]
 Dreg(1) = P_NOTIFY
 R=Lib Call(_DOS_ID, -$37E)
End Proc[R]
' 900 $fc7c -$0384 SetVar(name,buffer,size,flags)(d1/d2/d3/d4)
Procedure _SET_VAR[P_NAME,P_BUFFER,P_SIZE,P_FLAGS]
 Dreg(1) = P_NAME
 Dreg(2) = P_BUFFER
 Dreg(3) = P_SIZE
 Dreg(4) = P_FLAGS
 R=Lib Call(_DOS_ID, -$384)
End Proc[R]
' 906 $fc76 -$038a GetVar(name,buffer,size,flags)(d1/d2/d3/d4)
Procedure _GET_VAR[P_NAME,P_BUFFER,P_SIZE,P_FLAGS]
 Dreg(1) = P_NAME
 Dreg(2) = P_BUFFER
 Dreg(3) = P_SIZE
 Dreg(4) = P_FLAGS
 R=Lib Call(_DOS_ID, -$38A)
End Proc[R]
' 912 $fc70 -$0390 DeleteVar(name,flags)(d1/d2)
Procedure _DELETE_VAR[P_NAME,P_FLAGS]
 Dreg(1) = P_NAME
 Dreg(2) = P_FLAGS
 R=Lib Call(_DOS_ID, -$390)
End Proc[R]
' 918 $fc6a -$0396 FindVar(name,type)(d1/d2)
Procedure _FIND_VAR[P_NAME,P_TYPE]
 Dreg(1) = P_NAME
 Dreg(2) = P_TYPE
 R=Lib Call(_DOS_ID, -$396)
End Proc[R]
' 924 $fc64 -$039c CliInit(dp)(a0)
Procedure _CLI_INIT[P_DP]
 Areg(0) = P_DP
 R=Lib Call(_DOS_ID, -$39C)
End Proc[R]
' 930 $fc5e -$03a2 CliInitNewcli(dp)(a0)
Procedure _CLI_INIT_NEWCLI[P_DP]
 Areg(0) = P_DP
 R=Lib Call(_DOS_ID, -$3A2)
End Proc[R]
' 936 $fc58 -$03a8 CliInitRun(dp)(a0)
Procedure _CLI_INIT_RUN[P_DP]
 Areg(0) = P_DP
 R=Lib Call(_DOS_ID, -$3A8)
End Proc[R]
' 942 $fc52 -$03ae WriteChars(buf,buflen)(d1/d2)
Procedure _WRITE_CHARS[P_BUF,P_BUFLEN]
 Dreg(1) = P_BUF
 Dreg(2) = P_BUFLEN
 R=Lib Call(_DOS_ID, -$3AE)
End Proc[R]
' 948 $fc4c -$03b4 PutStr(str)(d1)
Procedure _PUT_STR[P_STR]
 Dreg(1) = P_STR
 R=Lib Call(_DOS_ID, -$3B4)
End Proc[R]
' 954 $fc46 -$03ba VPrintf(format,argarray)(d1/d2)
Procedure _V_PRINTF[P_FORMAT,P_ARGARRAY]
 Dreg(1) = P_FORMAT
 Dreg(2) = P_ARGARRAY
 R=Lib Call(_DOS_ID, -$3BA)
End Proc[R]
' 966 $fc3a -$03c6 ParsePatternNoCase(pat,buf,buflen)(d1/d2/d3)
Procedure _PARSE_PATTERN_NO_CASE[P_PAT,P_BUF,P_BUFLEN]
 Dreg(1) = P_PAT
 Dreg(2) = P_BUF
 Dreg(3) = P_BUFLEN
 R=Lib Call(_DOS_ID, -$3C6)
End Proc[R]
' 972 $fc34 -$03cc MatchPatternNoCase(pat,str)(d1/d2)
Procedure _MATCH_PATTERN_NO_CASE[P_PAT,P_STR]
 Dreg(1) = P_PAT
 Dreg(2) = P_STR
 R=Lib Call(_DOS_ID, -$3CC)
End Proc[R]
' 984 $fc28 -$03d8 SameDevice(lock1,lock2)(d1/d2)
Procedure _SAME_DEVICE[P_LOCK1,P_LOCK2]
 Dreg(1) = P_LOCK1
 Dreg(2) = P_LOCK2
 R=Lib Call(_DOS_ID, -$3D8)
End Proc[R]
