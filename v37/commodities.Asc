' commodities
_CX_BASE = 0 : _COMMODITIES_ID = 0
Global _CX_BASE, _COMMODITIES_ID
Procedure LIB_OPEN_COMMODITIES[P_ID]
 Lib Open P_ID, "commodities.library", 0
 _CX_BASE = Lib Base(P_ID)
 _COMMODITIES_ID = P_ID
End Proc[_CX_BASE]
Procedure LIB_CLOSE_COMMODITIES
 Lib Close _COMMODITIES_ID
End Proc
'  30 $ffe2 -$001e CreateCxObj(type,arg1,arg2)(d0/a0/a1)
Procedure _CREATE_CX_OBJ[P_TYPE,P_ARG1,P_ARG2]
 Dreg(0) = P_TYPE
 Areg(0) = P_ARG1
 Areg(1) = P_ARG2
 R=Lib Call(_COMMODITIES_ID, -$1E)
End Proc[R]
'  36 $ffdc -$0024 CxBroker(nb,error)(a0,d0)
Procedure _CX_BROKER[P_NB,P_ERROR]
 Areg(0) = P_NB
 Dreg(0) = P_ERROR
 R=Lib Call(_COMMODITIES_ID, -$24)
End Proc[R]
'  42 $ffd6 -$002a ActivateCxObj(co,true)(a0,d0)
Procedure _ACTIVATE_CX_OBJ[P_CO,P_TRUE]
 Areg(0) = P_CO
 Dreg(0) = P_TRUE
 R=Lib Call(_COMMODITIES_ID, -$2A)
End Proc[R]
'  48 $ffd0 -$0030 DeleteCxObj(co)(a0)
Procedure _DELETE_CX_OBJ[P_CO]
 Areg(0) = P_CO
 R=Lib Call(_COMMODITIES_ID, -$30)
End Proc[R]
'  54 $ffca -$0036 DeleteCxObjAll(co)(a0)
Procedure _DELETE_CX_OBJ_ALL[P_CO]
 Areg(0) = P_CO
 R=Lib Call(_COMMODITIES_ID, -$36)
End Proc[R]
'  60 $ffc4 -$003c CxObjType(co)(a0)
Procedure _CX_OBJ_TYPE[P_CO]
 Areg(0) = P_CO
 R=Lib Call(_COMMODITIES_ID, -$3C)
End Proc[R]
'  66 $ffbe -$0042 CxObjError(co)(a0)
Procedure _CX_OBJ_ERROR[P_CO]
 Areg(0) = P_CO
 R=Lib Call(_COMMODITIES_ID, -$42)
End Proc[R]
'  72 $ffb8 -$0048 ClearCxObjError(co)(a0)
Procedure _CLEAR_CX_OBJ_ERROR[P_CO]
 Areg(0) = P_CO
 R=Lib Call(_COMMODITIES_ID, -$48)
End Proc[R]
'  78 $ffb2 -$004e SetCxObjPri(co,pri)(a0,d0)
Procedure _SET_CX_OBJ_PRI[P_CO,P_PRI]
 Areg(0) = P_CO
 Dreg(0) = P_PRI
 R=Lib Call(_COMMODITIES_ID, -$4E)
End Proc[R]
'  84 $ffac -$0054 AttachCxObj(headobj,co)(a0/a1)
Procedure _ATTACH_CX_OBJ[P_HEADOBJ,P_CO]
 Areg(0) = P_HEADOBJ
 Areg(1) = P_CO
 R=Lib Call(_COMMODITIES_ID, -$54)
End Proc[R]
'  90 $ffa6 -$005a EnqueueCxObj(headobj,co)(a0/a1)
Procedure _ENQUEUE_CX_OBJ[P_HEADOBJ,P_CO]
 Areg(0) = P_HEADOBJ
 Areg(1) = P_CO
 R=Lib Call(_COMMODITIES_ID, -$5A)
End Proc[R]
'  96 $ffa0 -$0060 InsertCxObj(headobj,co,pred)(a0/a1/a2)
Procedure _INSERT_CX_OBJ[P_HEADOBJ,P_CO,P_PRED]
 Areg(0) = P_HEADOBJ
 Areg(1) = P_CO
 Areg(2) = P_PRED
 R=Lib Call(_COMMODITIES_ID, -$60)
End Proc[R]
' 102 $ff9a -$0066 RemoveCxObj(co)(a0)
Procedure _REMOVE_CX_OBJ[P_CO]
 Areg(0) = P_CO
 R=Lib Call(_COMMODITIES_ID, -$66)
End Proc[R]
' 114 $ff8e -$0072 SetTranslate(translator,ie)(a0/a1)
Procedure _SET_TRANSLATE[P_TRANSLATOR,P_IE]
 Areg(0) = P_TRANSLATOR
 Areg(1) = P_IE
 R=Lib Call(_COMMODITIES_ID, -$72)
End Proc[R]
' 120 $ff88 -$0078 SetFilter(filter,text)(a0/a1)
Procedure _SET_FILTER[P_FILTER,P_TEXT]
 Areg(0) = P_FILTER
 Areg(1) = P_TEXT
 R=Lib Call(_COMMODITIES_ID, -$78)
End Proc[R]
' 126 $ff82 -$007e SetFilterIX(filter,ix)(a0/a1)
Procedure _SET_FILTER_IX[P_FILTER,P_IX]
 Areg(0) = P_FILTER
 Areg(1) = P_IX
 R=Lib Call(_COMMODITIES_ID, -$7E)
End Proc[R]
' 132 $ff7c -$0084 ParseIX(descr,ix)(a0/a1)
Procedure _PARSE_IX[P_DESCR,P_IX]
 Areg(0) = P_DESCR
 Areg(1) = P_IX
 R=Lib Call(_COMMODITIES_ID, -$84)
End Proc[R]
' 138 $ff76 -$008a CxMsgType(cxm)(a0)
Procedure _CX_MSG_TYPE[P_CXM]
 Areg(0) = P_CXM
 R=Lib Call(_COMMODITIES_ID, -$8A)
End Proc[R]
' 144 $ff70 -$0090 CxMsgData(cxm)(a0)
Procedure _CX_MSG_DATA[P_CXM]
 Areg(0) = P_CXM
 R=Lib Call(_COMMODITIES_ID, -$90)
End Proc[R]
' 150 $ff6a -$0096 CxMsgID(cxm)(a0)
Procedure _CX_MSG_ID[P_CXM]
 Areg(0) = P_CXM
 R=Lib Call(_COMMODITIES_ID, -$96)
End Proc[R]
' 156 $ff64 -$009c DivertCxMsg(cxm,headobj,ret)(a0/a1/a2)
Procedure _DIVERT_CX_MSG[P_CXM,P_HEADOBJ,P_RET]
 Areg(0) = P_CXM
 Areg(1) = P_HEADOBJ
 Areg(2) = P_RET
 R=Lib Call(_COMMODITIES_ID, -$9C)
End Proc[R]
' 162 $ff5e -$00a2 RouteCxMsg(cxm,co)(a0/a1)
Procedure _ROUTE_CX_MSG[P_CXM,P_CO]
 Areg(0) = P_CXM
 Areg(1) = P_CO
 R=Lib Call(_COMMODITIES_ID, -$A2)
End Proc[R]
' 168 $ff58 -$00a8 DisposeCxMsg(cxm)(a0)
Procedure _DISPOSE_CX_MSG[P_CXM]
 Areg(0) = P_CXM
 R=Lib Call(_COMMODITIES_ID, -$A8)
End Proc[R]
' 174 $ff52 -$00ae InvertKeyMap(ansicode,ie,km)(d0/a0/a1)
Procedure _INVERT_KEY_MAP[P_ANSICODE,P_IE,P_KM]
 Dreg(0) = P_ANSICODE
 Areg(0) = P_IE
 Areg(1) = P_KM
 R=Lib Call(_COMMODITIES_ID, -$AE)
End Proc[R]
' 180 $ff4c -$00b4 AddIEvents(ie)(a0)
Procedure _ADD_I_EVENTS[P_IE]
 Areg(0) = P_IE
 R=Lib Call(_COMMODITIES_ID, -$B4)
End Proc[R]
